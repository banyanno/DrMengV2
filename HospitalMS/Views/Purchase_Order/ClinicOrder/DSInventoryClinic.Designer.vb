'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSInventoryClinic"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSInventoryClinic
    Inherits Global.System.Data.DataSet
    
    Private tableRECEIVE_ITEM_TEM_DETAIL As RECEIVE_ITEM_TEM_DETAILDataTable
    
    Private tabletblItem As tblItemDataTable
    
    Private tableITEM_RECIEVE_DETIAL As ITEM_RECIEVE_DETIALDataTable
    
    Private tableITEM_RECIEVE_MASTER As ITEM_RECIEVE_MASTERDataTable
    
    Private tabletblLabourFactory As tblLabourFactoryDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RECEIVE_ITEM_TEM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New RECEIVE_ITEM_TEM_DETAILDataTable(ds.Tables("RECEIVE_ITEM_TEM_DETAIL")))
            End If
            If (Not (ds.Tables("tblItem")) Is Nothing) Then
                MyBase.Tables.Add(New tblItemDataTable(ds.Tables("tblItem")))
            End If
            If (Not (ds.Tables("ITEM_RECIEVE_DETIAL")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_RECIEVE_DETIALDataTable(ds.Tables("ITEM_RECIEVE_DETIAL")))
            End If
            If (Not (ds.Tables("ITEM_RECIEVE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_RECIEVE_MASTERDataTable(ds.Tables("ITEM_RECIEVE_MASTER")))
            End If
            If (Not (ds.Tables("tblLabourFactory")) Is Nothing) Then
                MyBase.Tables.Add(New tblLabourFactoryDataTable(ds.Tables("tblLabourFactory")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RECEIVE_ITEM_TEM_DETAIL() As RECEIVE_ITEM_TEM_DETAILDataTable
        Get
            Return Me.tableRECEIVE_ITEM_TEM_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblItem() As tblItemDataTable
        Get
            Return Me.tabletblItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEM_RECIEVE_DETIAL() As ITEM_RECIEVE_DETIALDataTable
        Get
            Return Me.tableITEM_RECIEVE_DETIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEM_RECIEVE_MASTER() As ITEM_RECIEVE_MASTERDataTable
        Get
            Return Me.tableITEM_RECIEVE_MASTER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblLabourFactory() As tblLabourFactoryDataTable
        Get
            Return Me.tabletblLabourFactory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSInventoryClinic = CType(MyBase.Clone,DSInventoryClinic)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RECEIVE_ITEM_TEM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New RECEIVE_ITEM_TEM_DETAILDataTable(ds.Tables("RECEIVE_ITEM_TEM_DETAIL")))
            End If
            If (Not (ds.Tables("tblItem")) Is Nothing) Then
                MyBase.Tables.Add(New tblItemDataTable(ds.Tables("tblItem")))
            End If
            If (Not (ds.Tables("ITEM_RECIEVE_DETIAL")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_RECIEVE_DETIALDataTable(ds.Tables("ITEM_RECIEVE_DETIAL")))
            End If
            If (Not (ds.Tables("ITEM_RECIEVE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_RECIEVE_MASTERDataTable(ds.Tables("ITEM_RECIEVE_MASTER")))
            End If
            If (Not (ds.Tables("tblLabourFactory")) Is Nothing) Then
                MyBase.Tables.Add(New tblLabourFactoryDataTable(ds.Tables("tblLabourFactory")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRECEIVE_ITEM_TEM_DETAIL = CType(MyBase.Tables("RECEIVE_ITEM_TEM_DETAIL"),RECEIVE_ITEM_TEM_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRECEIVE_ITEM_TEM_DETAIL) Is Nothing) Then
                Me.tableRECEIVE_ITEM_TEM_DETAIL.InitVars
            End If
        End If
        Me.tabletblItem = CType(MyBase.Tables("tblItem"),tblItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblItem) Is Nothing) Then
                Me.tabletblItem.InitVars
            End If
        End If
        Me.tableITEM_RECIEVE_DETIAL = CType(MyBase.Tables("ITEM_RECIEVE_DETIAL"),ITEM_RECIEVE_DETIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEM_RECIEVE_DETIAL) Is Nothing) Then
                Me.tableITEM_RECIEVE_DETIAL.InitVars
            End If
        End If
        Me.tableITEM_RECIEVE_MASTER = CType(MyBase.Tables("ITEM_RECIEVE_MASTER"),ITEM_RECIEVE_MASTERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEM_RECIEVE_MASTER) Is Nothing) Then
                Me.tableITEM_RECIEVE_MASTER.InitVars
            End If
        End If
        Me.tabletblLabourFactory = CType(MyBase.Tables("tblLabourFactory"),tblLabourFactoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblLabourFactory) Is Nothing) Then
                Me.tabletblLabourFactory.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSInventoryClinic"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSInventoryClinic.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRECEIVE_ITEM_TEM_DETAIL = New RECEIVE_ITEM_TEM_DETAILDataTable
        MyBase.Tables.Add(Me.tableRECEIVE_ITEM_TEM_DETAIL)
        Me.tabletblItem = New tblItemDataTable
        MyBase.Tables.Add(Me.tabletblItem)
        Me.tableITEM_RECIEVE_DETIAL = New ITEM_RECIEVE_DETIALDataTable
        MyBase.Tables.Add(Me.tableITEM_RECIEVE_DETIAL)
        Me.tableITEM_RECIEVE_MASTER = New ITEM_RECIEVE_MASTERDataTable
        MyBase.Tables.Add(Me.tableITEM_RECIEVE_MASTER)
        Me.tabletblLabourFactory = New tblLabourFactoryDataTable
        MyBase.Tables.Add(Me.tabletblLabourFactory)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRECEIVE_ITEM_TEM_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeITEM_RECIEVE_DETIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeITEM_RECIEVE_MASTER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblLabourFactory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSInventoryClinic = New DSInventoryClinic
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub RECEIVE_ITEM_TEM_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As RECEIVE_ITEM_TEM_DETAILRowChangeEvent)
    
    Public Delegate Sub tblItemRowChangeEventHandler(ByVal sender As Object, ByVal e As tblItemRowChangeEvent)
    
    Public Delegate Sub ITEM_RECIEVE_DETIALRowChangeEventHandler(ByVal sender As Object, ByVal e As ITEM_RECIEVE_DETIALRowChangeEvent)
    
    Public Delegate Sub ITEM_RECIEVE_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As ITEM_RECIEVE_MASTERRowChangeEvent)
    
    Public Delegate Sub tblLabourFactoryRowChangeEventHandler(ByVal sender As Object, ByVal e As tblLabourFactoryRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RECEIVE_ITEM_TEM_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of RECEIVE_ITEM_TEM_DETAILRow)
        
        Private columnRECEIVETEM_ID As Global.System.Data.DataColumn
        
        Private columnRECEIVEID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnITEM_QTY As Global.System.Data.DataColumn
        
        Private columnITEM_PRICE As Global.System.Data.DataColumn
        
        Private columnITEM_MEASURE As Global.System.Data.DataColumn
        
        Private columnITEM_EXPIRYDATE As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RECEIVE_ITEM_TEM_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVETEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVETEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_MEASUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_MEASURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_EXPIRYDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_EXPIRYDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RECEIVE_ITEM_TEM_DETAILRow
            Get
                Return CType(Me.Rows(index),RECEIVE_ITEM_TEM_DETAILRow)
            End Get
        End Property
        
        Public Event RECEIVE_ITEM_TEM_DETAILRowChanging As RECEIVE_ITEM_TEM_DETAILRowChangeEventHandler
        
        Public Event RECEIVE_ITEM_TEM_DETAILRowChanged As RECEIVE_ITEM_TEM_DETAILRowChangeEventHandler
        
        Public Event RECEIVE_ITEM_TEM_DETAILRowDeleting As RECEIVE_ITEM_TEM_DETAILRowChangeEventHandler
        
        Public Event RECEIVE_ITEM_TEM_DETAILRowDeleted As RECEIVE_ITEM_TEM_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRECEIVE_ITEM_TEM_DETAILRow(ByVal row As RECEIVE_ITEM_TEM_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRECEIVE_ITEM_TEM_DETAILRow(ByVal RECEIVEID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_QTY As Decimal, ByVal ITEM_PRICE As Decimal, ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYDATE As Date, ByVal TOTAL_AMOUNT As Decimal, ByVal ITEM_ID As Decimal) As RECEIVE_ITEM_TEM_DETAILRow
            Dim rowRECEIVE_ITEM_TEM_DETAILRow As RECEIVE_ITEM_TEM_DETAILRow = CType(Me.NewRow,RECEIVE_ITEM_TEM_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RECEIVEID, ITEM_NAME, ITEM_QTY, ITEM_PRICE, ITEM_MEASURE, ITEM_EXPIRYDATE, TOTAL_AMOUNT, ITEM_ID}
            rowRECEIVE_ITEM_TEM_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRECEIVE_ITEM_TEM_DETAILRow)
            Return rowRECEIVE_ITEM_TEM_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRECEIVETEM_ID(ByVal RECEIVETEM_ID As Decimal) As RECEIVE_ITEM_TEM_DETAILRow
            Return CType(Me.Rows.Find(New Object() {RECEIVETEM_ID}),RECEIVE_ITEM_TEM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RECEIVE_ITEM_TEM_DETAILDataTable = CType(MyBase.Clone,RECEIVE_ITEM_TEM_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RECEIVE_ITEM_TEM_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRECEIVETEM_ID = MyBase.Columns("RECEIVETEM_ID")
            Me.columnRECEIVEID = MyBase.Columns("RECEIVEID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnITEM_QTY = MyBase.Columns("ITEM_QTY")
            Me.columnITEM_PRICE = MyBase.Columns("ITEM_PRICE")
            Me.columnITEM_MEASURE = MyBase.Columns("ITEM_MEASURE")
            Me.columnITEM_EXPIRYDATE = MyBase.Columns("ITEM_EXPIRYDATE")
            Me.columnTOTAL_AMOUNT = MyBase.Columns("TOTAL_AMOUNT")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRECEIVETEM_ID = New Global.System.Data.DataColumn("RECEIVETEM_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVETEM_ID)
            Me.columnRECEIVEID = New Global.System.Data.DataColumn("RECEIVEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVEID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnITEM_QTY = New Global.System.Data.DataColumn("ITEM_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_QTY)
            Me.columnITEM_PRICE = New Global.System.Data.DataColumn("ITEM_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_PRICE)
            Me.columnITEM_MEASURE = New Global.System.Data.DataColumn("ITEM_MEASURE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_MEASURE)
            Me.columnITEM_EXPIRYDATE = New Global.System.Data.DataColumn("ITEM_EXPIRYDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_EXPIRYDATE)
            Me.columnTOTAL_AMOUNT = New Global.System.Data.DataColumn("TOTAL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRECEIVETEM_ID}, true))
            Me.columnRECEIVETEM_ID.AutoIncrement = true
            Me.columnRECEIVETEM_ID.AutoIncrementSeed = -1
            Me.columnRECEIVETEM_ID.AutoIncrementStep = -1
            Me.columnRECEIVETEM_ID.AllowDBNull = false
            Me.columnRECEIVETEM_ID.ReadOnly = true
            Me.columnRECEIVETEM_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 50
            Me.columnITEM_MEASURE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRECEIVE_ITEM_TEM_DETAILRow() As RECEIVE_ITEM_TEM_DETAILRow
            Return CType(Me.NewRow,RECEIVE_ITEM_TEM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RECEIVE_ITEM_TEM_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RECEIVE_ITEM_TEM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RECEIVE_ITEM_TEM_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent RECEIVE_ITEM_TEM_DETAILRowChanged(Me, New RECEIVE_ITEM_TEM_DETAILRowChangeEvent(CType(e.Row,RECEIVE_ITEM_TEM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RECEIVE_ITEM_TEM_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent RECEIVE_ITEM_TEM_DETAILRowChanging(Me, New RECEIVE_ITEM_TEM_DETAILRowChangeEvent(CType(e.Row,RECEIVE_ITEM_TEM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RECEIVE_ITEM_TEM_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent RECEIVE_ITEM_TEM_DETAILRowDeleted(Me, New RECEIVE_ITEM_TEM_DETAILRowChangeEvent(CType(e.Row,RECEIVE_ITEM_TEM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RECEIVE_ITEM_TEM_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent RECEIVE_ITEM_TEM_DETAILRowDeleting(Me, New RECEIVE_ITEM_TEM_DETAILRowChangeEvent(CType(e.Row,RECEIVE_ITEM_TEM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRECEIVE_ITEM_TEM_DETAILRow(ByVal row As RECEIVE_ITEM_TEM_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInventoryClinic = New DSInventoryClinic
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RECEIVE_ITEM_TEM_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblItemRow)
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnCateID As Global.System.Data.DataColumn
        
        Private columnItemUnitID As Global.System.Data.DataColumn
        
        Private columnLabourFacID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnItemDescription As Global.System.Data.DataColumn
        
        Private columnItemRegisterDate As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnVendorID As Global.System.Data.DataColumn
        
        Private columnContainerID As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        Private columnDonatorID As Global.System.Data.DataColumn
        
        Private columnIsMedicine As Global.System.Data.DataColumn
        
        Private columnCurrencyID As Global.System.Data.DataColumn
        
        Private columnDateExpired As Global.System.Data.DataColumn
        
        Private columnCountryID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemUnitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemUnitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemRegisterDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemRegisterDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContainerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonatorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonatorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsMedicineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsMedicine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrencyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExpiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExpired
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblItemRow
            Get
                Return CType(Me.Rows(index),tblItemRow)
            End Get
        End Property
        
        Public Event tblItemRowChanging As tblItemRowChangeEventHandler
        
        Public Event tblItemRowChanged As tblItemRowChangeEventHandler
        
        Public Event tblItemRowDeleting As tblItemRowChangeEventHandler
        
        Public Event tblItemRowDeleted As tblItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblItemRow(ByVal row As tblItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblItemRow( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Integer,  _
                    ByVal ItemUnitID As Integer,  _
                    ByVal LabourFacID As Integer,  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Date,  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Integer,  _
                    ByVal ContainerID As Integer,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Integer,  _
                    ByVal IsMedicine As Boolean,  _
                    ByVal CurrencyID As Decimal,  _
                    ByVal DateExpired As Date,  _
                    ByVal CountryID As Decimal) As tblItemRow
            Dim rowtblItemRow As tblItemRow = CType(Me.NewRow,tblItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID}
            rowtblItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblItemRow)
            Return rowtblItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItemID(ByVal ItemID As Integer) As tblItemRow
            Return CType(Me.Rows.Find(New Object() {ItemID}),tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblItemDataTable = CType(MyBase.Clone,tblItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnCateID = MyBase.Columns("CateID")
            Me.columnItemUnitID = MyBase.Columns("ItemUnitID")
            Me.columnLabourFacID = MyBase.Columns("LabourFacID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnItemDescription = MyBase.Columns("ItemDescription")
            Me.columnItemRegisterDate = MyBase.Columns("ItemRegisterDate")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnVendorID = MyBase.Columns("VendorID")
            Me.columnContainerID = MyBase.Columns("ContainerID")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnPicture = MyBase.Columns("Picture")
            Me.columnDonatorID = MyBase.Columns("DonatorID")
            Me.columnIsMedicine = MyBase.Columns("IsMedicine")
            Me.columnCurrencyID = MyBase.Columns("CurrencyID")
            Me.columnDateExpired = MyBase.Columns("DateExpired")
            Me.columnCountryID = MyBase.Columns("CountryID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnCateID = New Global.System.Data.DataColumn("CateID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateID)
            Me.columnItemUnitID = New Global.System.Data.DataColumn("ItemUnitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemUnitID)
            Me.columnLabourFacID = New Global.System.Data.DataColumn("LabourFacID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnItemDescription = New Global.System.Data.DataColumn("ItemDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDescription)
            Me.columnItemRegisterDate = New Global.System.Data.DataColumn("ItemRegisterDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemRegisterDate)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnVendorID = New Global.System.Data.DataColumn("VendorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorID)
            Me.columnContainerID = New Global.System.Data.DataColumn("ContainerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainerID)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.columnDonatorID = New Global.System.Data.DataColumn("DonatorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonatorID)
            Me.columnIsMedicine = New Global.System.Data.DataColumn("IsMedicine", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsMedicine)
            Me.columnCurrencyID = New Global.System.Data.DataColumn("CurrencyID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrencyID)
            Me.columnDateExpired = New Global.System.Data.DataColumn("DateExpired", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExpired)
            Me.columnCountryID = New Global.System.Data.DataColumn("CountryID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountryID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItemID}, true))
            Me.columnItemID.AutoIncrement = true
            Me.columnItemID.AutoIncrementSeed = -1
            Me.columnItemID.AutoIncrementStep = -1
            Me.columnItemID.AllowDBNull = false
            Me.columnItemID.ReadOnly = true
            Me.columnItemID.Unique = true
            Me.columnItemCode.MaxLength = 100
            Me.columnItemName.MaxLength = 150
            Me.columnItemDescription.MaxLength = 250
            Me.columnBarcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblItemRow() As tblItemRow
            Return CType(Me.NewRow,tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblItemRowChangedEvent) Is Nothing) Then
                RaiseEvent tblItemRowChanged(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblItemRowChangingEvent) Is Nothing) Then
                RaiseEvent tblItemRowChanging(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblItemRowDeleted(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblItemRowDeleting(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblItemRow(ByVal row As tblItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInventoryClinic = New DSInventoryClinic
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEM_RECIEVE_DETIALDataTable
        Inherits Global.System.Data.TypedTableBase(Of ITEM_RECIEVE_DETIALRow)
        
        Private columnRECEIVE_DETIAL_ID As Global.System.Data.DataColumn
        
        Private columnRECEIVE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnITEM_MEASURE As Global.System.Data.DataColumn
        
        Private columnITEM_EXPIRYT As Global.System.Data.DataColumn
        
        Private columnITEM_RECEIVE_QTY As Global.System.Data.DataColumn
        
        Private columnITEM_RECEIVE_PRICE As Global.System.Data.DataColumn
        
        Private columnITEM_TOTAL_PRICE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ITEM_RECIEVE_DETIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_DETIAL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_DETIAL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_MEASUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_MEASURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_EXPIRYTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_EXPIRYT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_RECEIVE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_RECEIVE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_RECEIVE_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_RECEIVE_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_TOTAL_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_TOTAL_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEM_RECIEVE_DETIALRow
            Get
                Return CType(Me.Rows(index),ITEM_RECIEVE_DETIALRow)
            End Get
        End Property
        
        Public Event ITEM_RECIEVE_DETIALRowChanging As ITEM_RECIEVE_DETIALRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_DETIALRowChanged As ITEM_RECIEVE_DETIALRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_DETIALRowDeleting As ITEM_RECIEVE_DETIALRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_DETIALRowDeleted As ITEM_RECIEVE_DETIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddITEM_RECIEVE_DETIALRow(ByVal row As ITEM_RECIEVE_DETIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddITEM_RECIEVE_DETIALRow(ByVal RECEIVE_ID As Decimal, ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYT As Date, ByVal ITEM_RECEIVE_QTY As Decimal, ByVal ITEM_RECEIVE_PRICE As Decimal, ByVal ITEM_TOTAL_PRICE As Decimal) As ITEM_RECIEVE_DETIALRow
            Dim rowITEM_RECIEVE_DETIALRow As ITEM_RECIEVE_DETIALRow = CType(Me.NewRow,ITEM_RECIEVE_DETIALRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RECEIVE_ID, ITEM_ID, ITEM_NAME, ITEM_MEASURE, ITEM_EXPIRYT, ITEM_RECEIVE_QTY, ITEM_RECEIVE_PRICE, ITEM_TOTAL_PRICE}
            rowITEM_RECIEVE_DETIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEM_RECIEVE_DETIALRow)
            Return rowITEM_RECIEVE_DETIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRECEIVE_DETIAL_ID(ByVal RECEIVE_DETIAL_ID As Decimal) As ITEM_RECIEVE_DETIALRow
            Return CType(Me.Rows.Find(New Object() {RECEIVE_DETIAL_ID}),ITEM_RECIEVE_DETIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEM_RECIEVE_DETIALDataTable = CType(MyBase.Clone,ITEM_RECIEVE_DETIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEM_RECIEVE_DETIALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRECEIVE_DETIAL_ID = MyBase.Columns("RECEIVE_DETIAL_ID")
            Me.columnRECEIVE_ID = MyBase.Columns("RECEIVE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnITEM_MEASURE = MyBase.Columns("ITEM_MEASURE")
            Me.columnITEM_EXPIRYT = MyBase.Columns("ITEM_EXPIRYT")
            Me.columnITEM_RECEIVE_QTY = MyBase.Columns("ITEM_RECEIVE_QTY")
            Me.columnITEM_RECEIVE_PRICE = MyBase.Columns("ITEM_RECEIVE_PRICE")
            Me.columnITEM_TOTAL_PRICE = MyBase.Columns("ITEM_TOTAL_PRICE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRECEIVE_DETIAL_ID = New Global.System.Data.DataColumn("RECEIVE_DETIAL_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_DETIAL_ID)
            Me.columnRECEIVE_ID = New Global.System.Data.DataColumn("RECEIVE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnITEM_MEASURE = New Global.System.Data.DataColumn("ITEM_MEASURE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_MEASURE)
            Me.columnITEM_EXPIRYT = New Global.System.Data.DataColumn("ITEM_EXPIRYT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_EXPIRYT)
            Me.columnITEM_RECEIVE_QTY = New Global.System.Data.DataColumn("ITEM_RECEIVE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_RECEIVE_QTY)
            Me.columnITEM_RECEIVE_PRICE = New Global.System.Data.DataColumn("ITEM_RECEIVE_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_RECEIVE_PRICE)
            Me.columnITEM_TOTAL_PRICE = New Global.System.Data.DataColumn("ITEM_TOTAL_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_TOTAL_PRICE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRECEIVE_DETIAL_ID}, true))
            Me.columnRECEIVE_DETIAL_ID.AutoIncrement = true
            Me.columnRECEIVE_DETIAL_ID.AutoIncrementSeed = -1
            Me.columnRECEIVE_DETIAL_ID.AutoIncrementStep = -1
            Me.columnRECEIVE_DETIAL_ID.AllowDBNull = false
            Me.columnRECEIVE_DETIAL_ID.ReadOnly = true
            Me.columnRECEIVE_DETIAL_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 50
            Me.columnITEM_MEASURE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewITEM_RECIEVE_DETIALRow() As ITEM_RECIEVE_DETIALRow
            Return CType(Me.NewRow,ITEM_RECIEVE_DETIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEM_RECIEVE_DETIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEM_RECIEVE_DETIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEM_RECIEVE_DETIALRowChangedEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_DETIALRowChanged(Me, New ITEM_RECIEVE_DETIALRowChangeEvent(CType(e.Row,ITEM_RECIEVE_DETIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEM_RECIEVE_DETIALRowChangingEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_DETIALRowChanging(Me, New ITEM_RECIEVE_DETIALRowChangeEvent(CType(e.Row,ITEM_RECIEVE_DETIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEM_RECIEVE_DETIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_DETIALRowDeleted(Me, New ITEM_RECIEVE_DETIALRowChangeEvent(CType(e.Row,ITEM_RECIEVE_DETIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEM_RECIEVE_DETIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_DETIALRowDeleting(Me, New ITEM_RECIEVE_DETIALRowChangeEvent(CType(e.Row,ITEM_RECIEVE_DETIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveITEM_RECIEVE_DETIALRow(ByVal row As ITEM_RECIEVE_DETIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInventoryClinic = New DSInventoryClinic
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEM_RECIEVE_DETIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEM_RECIEVE_MASTERDataTable
        Inherits Global.System.Data.TypedTableBase(Of ITEM_RECIEVE_MASTERRow)
        
        Private columnRECEIVE_ID As Global.System.Data.DataColumn
        
        Private columnRECEIVE_DATE As Global.System.Data.DataColumn
        
        Private columnREFERAN_INVOICE_NO As Global.System.Data.DataColumn
        
        Private columnREFERAN_INVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnREFERAN_DUE_DATE As Global.System.Data.DataColumn
        
        Private columnREFERAN_TEAM As Global.System.Data.DataColumn
        
        Private columnSUPPLY_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLY_NAME As Global.System.Data.DataColumn
        
        Private columnSUPPLY_INFO As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Data.DataColumn
        
        Private columnVAT As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_INCLUDE_VAT As Global.System.Data.DataColumn
        
        Private columnLEST_DEPOSIT As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_DUE As Global.System.Data.DataColumn
        
        Private columnRECEIVE_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ITEM_RECIEVE_MASTER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERAN_INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERAN_INVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERAN_INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERAN_INVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERAN_DUE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERAN_DUE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERAN_TEAMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERAN_TEAM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLY_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLY_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLY_INFOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLY_INFO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_EXCLUDE_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_EXCLUDE_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_INCLUDE_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_INCLUDE_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEST_DEPOSITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEST_DEPOSIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_DUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_DUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEM_RECIEVE_MASTERRow
            Get
                Return CType(Me.Rows(index),ITEM_RECIEVE_MASTERRow)
            End Get
        End Property
        
        Public Event ITEM_RECIEVE_MASTERRowChanging As ITEM_RECIEVE_MASTERRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_MASTERRowChanged As ITEM_RECIEVE_MASTERRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_MASTERRowDeleting As ITEM_RECIEVE_MASTERRowChangeEventHandler
        
        Public Event ITEM_RECIEVE_MASTERRowDeleted As ITEM_RECIEVE_MASTERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddITEM_RECIEVE_MASTERRow(ByVal row As ITEM_RECIEVE_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddITEM_RECIEVE_MASTERRow(ByVal RECEIVE_DATE As Date, ByVal REFERAN_INVOICE_NO As String, ByVal REFERAN_INVOICE_DATE As Date, ByVal REFERAN_DUE_DATE As Date, ByVal REFERAN_TEAM As String, ByVal SUPPLY_NO As String, ByVal SUPPLY_NAME As String, ByVal SUPPLY_INFO As String, ByVal TOTAL_AMOUNT_EXCLUDE_VAT As Decimal, ByVal VAT As Decimal, ByVal TOTAL_AMOUNT_INCLUDE_VAT As Decimal, ByVal LEST_DEPOSIT As Decimal, ByVal TOTAL_AMOUNT_DUE As Decimal, ByVal RECEIVE_NOTE As String) As ITEM_RECIEVE_MASTERRow
            Dim rowITEM_RECIEVE_MASTERRow As ITEM_RECIEVE_MASTERRow = CType(Me.NewRow,ITEM_RECIEVE_MASTERRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RECEIVE_DATE, REFERAN_INVOICE_NO, REFERAN_INVOICE_DATE, REFERAN_DUE_DATE, REFERAN_TEAM, SUPPLY_NO, SUPPLY_NAME, SUPPLY_INFO, TOTAL_AMOUNT_EXCLUDE_VAT, VAT, TOTAL_AMOUNT_INCLUDE_VAT, LEST_DEPOSIT, TOTAL_AMOUNT_DUE, RECEIVE_NOTE}
            rowITEM_RECIEVE_MASTERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEM_RECIEVE_MASTERRow)
            Return rowITEM_RECIEVE_MASTERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRECEIVE_ID(ByVal RECEIVE_ID As Decimal) As ITEM_RECIEVE_MASTERRow
            Return CType(Me.Rows.Find(New Object() {RECEIVE_ID}),ITEM_RECIEVE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEM_RECIEVE_MASTERDataTable = CType(MyBase.Clone,ITEM_RECIEVE_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEM_RECIEVE_MASTERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRECEIVE_ID = MyBase.Columns("RECEIVE_ID")
            Me.columnRECEIVE_DATE = MyBase.Columns("RECEIVE_DATE")
            Me.columnREFERAN_INVOICE_NO = MyBase.Columns("REFERAN_INVOICE_NO")
            Me.columnREFERAN_INVOICE_DATE = MyBase.Columns("REFERAN_INVOICE_DATE")
            Me.columnREFERAN_DUE_DATE = MyBase.Columns("REFERAN_DUE_DATE")
            Me.columnREFERAN_TEAM = MyBase.Columns("REFERAN_TEAM")
            Me.columnSUPPLY_NO = MyBase.Columns("SUPPLY_NO")
            Me.columnSUPPLY_NAME = MyBase.Columns("SUPPLY_NAME")
            Me.columnSUPPLY_INFO = MyBase.Columns("SUPPLY_INFO")
            Me.columnTOTAL_AMOUNT_EXCLUDE_VAT = MyBase.Columns("TOTAL_AMOUNT_EXCLUDE_VAT")
            Me.columnVAT = MyBase.Columns("VAT")
            Me.columnTOTAL_AMOUNT_INCLUDE_VAT = MyBase.Columns("TOTAL_AMOUNT_INCLUDE_VAT")
            Me.columnLEST_DEPOSIT = MyBase.Columns("LEST_DEPOSIT")
            Me.columnTOTAL_AMOUNT_DUE = MyBase.Columns("TOTAL_AMOUNT_DUE")
            Me.columnRECEIVE_NOTE = MyBase.Columns("RECEIVE_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRECEIVE_ID = New Global.System.Data.DataColumn("RECEIVE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_ID)
            Me.columnRECEIVE_DATE = New Global.System.Data.DataColumn("RECEIVE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_DATE)
            Me.columnREFERAN_INVOICE_NO = New Global.System.Data.DataColumn("REFERAN_INVOICE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERAN_INVOICE_NO)
            Me.columnREFERAN_INVOICE_DATE = New Global.System.Data.DataColumn("REFERAN_INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERAN_INVOICE_DATE)
            Me.columnREFERAN_DUE_DATE = New Global.System.Data.DataColumn("REFERAN_DUE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERAN_DUE_DATE)
            Me.columnREFERAN_TEAM = New Global.System.Data.DataColumn("REFERAN_TEAM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERAN_TEAM)
            Me.columnSUPPLY_NO = New Global.System.Data.DataColumn("SUPPLY_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLY_NO)
            Me.columnSUPPLY_NAME = New Global.System.Data.DataColumn("SUPPLY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLY_NAME)
            Me.columnSUPPLY_INFO = New Global.System.Data.DataColumn("SUPPLY_INFO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLY_INFO)
            Me.columnTOTAL_AMOUNT_EXCLUDE_VAT = New Global.System.Data.DataColumn("TOTAL_AMOUNT_EXCLUDE_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_EXCLUDE_VAT)
            Me.columnVAT = New Global.System.Data.DataColumn("VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAT)
            Me.columnTOTAL_AMOUNT_INCLUDE_VAT = New Global.System.Data.DataColumn("TOTAL_AMOUNT_INCLUDE_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_INCLUDE_VAT)
            Me.columnLEST_DEPOSIT = New Global.System.Data.DataColumn("LEST_DEPOSIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEST_DEPOSIT)
            Me.columnTOTAL_AMOUNT_DUE = New Global.System.Data.DataColumn("TOTAL_AMOUNT_DUE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_DUE)
            Me.columnRECEIVE_NOTE = New Global.System.Data.DataColumn("RECEIVE_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRECEIVE_ID}, true))
            Me.columnRECEIVE_ID.AutoIncrement = true
            Me.columnRECEIVE_ID.AutoIncrementSeed = -1
            Me.columnRECEIVE_ID.AutoIncrementStep = -1
            Me.columnRECEIVE_ID.AllowDBNull = false
            Me.columnRECEIVE_ID.ReadOnly = true
            Me.columnRECEIVE_ID.Unique = true
            Me.columnREFERAN_INVOICE_NO.MaxLength = 50
            Me.columnREFERAN_TEAM.MaxLength = 50
            Me.columnSUPPLY_NO.MaxLength = 50
            Me.columnSUPPLY_NAME.MaxLength = 50
            Me.columnSUPPLY_INFO.MaxLength = 50
            Me.columnRECEIVE_NOTE.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewITEM_RECIEVE_MASTERRow() As ITEM_RECIEVE_MASTERRow
            Return CType(Me.NewRow,ITEM_RECIEVE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEM_RECIEVE_MASTERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEM_RECIEVE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEM_RECIEVE_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_MASTERRowChanged(Me, New ITEM_RECIEVE_MASTERRowChangeEvent(CType(e.Row,ITEM_RECIEVE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEM_RECIEVE_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_MASTERRowChanging(Me, New ITEM_RECIEVE_MASTERRowChangeEvent(CType(e.Row,ITEM_RECIEVE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEM_RECIEVE_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_MASTERRowDeleted(Me, New ITEM_RECIEVE_MASTERRowChangeEvent(CType(e.Row,ITEM_RECIEVE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEM_RECIEVE_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEM_RECIEVE_MASTERRowDeleting(Me, New ITEM_RECIEVE_MASTERRowChangeEvent(CType(e.Row,ITEM_RECIEVE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveITEM_RECIEVE_MASTERRow(ByVal row As ITEM_RECIEVE_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInventoryClinic = New DSInventoryClinic
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEM_RECIEVE_MASTERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblLabourFactoryDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblLabourFactoryRow)
        
        Private columnLabourFacID As Global.System.Data.DataColumn
        
        Private columnLabourFacName As Global.System.Data.DataColumn
        
        Private columnLabourPhone As Global.System.Data.DataColumn
        
        Private columnLabourFacAddress As Global.System.Data.DataColumn
        
        Private columnLabourFacEmail As Global.System.Data.DataColumn
        
        Private columnLabourFacFax As Global.System.Data.DataColumn
        
        Private columnLabourFacRegisterDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblLabourFactory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacFaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacRegisterDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacRegisterDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblLabourFactoryRow
            Get
                Return CType(Me.Rows(index),tblLabourFactoryRow)
            End Get
        End Property
        
        Public Event tblLabourFactoryRowChanging As tblLabourFactoryRowChangeEventHandler
        
        Public Event tblLabourFactoryRowChanged As tblLabourFactoryRowChangeEventHandler
        
        Public Event tblLabourFactoryRowDeleting As tblLabourFactoryRowChangeEventHandler
        
        Public Event tblLabourFactoryRowDeleted As tblLabourFactoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblLabourFactoryRow(ByVal row As tblLabourFactoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblLabourFactoryRow(ByVal LabourFacName As String, ByVal LabourPhone As String, ByVal LabourFacAddress As String, ByVal LabourFacEmail As String, ByVal LabourFacFax As String, ByVal LabourFacRegisterDate As Date) As tblLabourFactoryRow
            Dim rowtblLabourFactoryRow As tblLabourFactoryRow = CType(Me.NewRow,tblLabourFactoryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LabourFacName, LabourPhone, LabourFacAddress, LabourFacEmail, LabourFacFax, LabourFacRegisterDate}
            rowtblLabourFactoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblLabourFactoryRow)
            Return rowtblLabourFactoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLabourFacID(ByVal LabourFacID As Integer) As tblLabourFactoryRow
            Return CType(Me.Rows.Find(New Object() {LabourFacID}),tblLabourFactoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblLabourFactoryDataTable = CType(MyBase.Clone,tblLabourFactoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblLabourFactoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLabourFacID = MyBase.Columns("LabourFacID")
            Me.columnLabourFacName = MyBase.Columns("LabourFacName")
            Me.columnLabourPhone = MyBase.Columns("LabourPhone")
            Me.columnLabourFacAddress = MyBase.Columns("LabourFacAddress")
            Me.columnLabourFacEmail = MyBase.Columns("LabourFacEmail")
            Me.columnLabourFacFax = MyBase.Columns("LabourFacFax")
            Me.columnLabourFacRegisterDate = MyBase.Columns("LabourFacRegisterDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLabourFacID = New Global.System.Data.DataColumn("LabourFacID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacID)
            Me.columnLabourFacName = New Global.System.Data.DataColumn("LabourFacName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacName)
            Me.columnLabourPhone = New Global.System.Data.DataColumn("LabourPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourPhone)
            Me.columnLabourFacAddress = New Global.System.Data.DataColumn("LabourFacAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacAddress)
            Me.columnLabourFacEmail = New Global.System.Data.DataColumn("LabourFacEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacEmail)
            Me.columnLabourFacFax = New Global.System.Data.DataColumn("LabourFacFax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacFax)
            Me.columnLabourFacRegisterDate = New Global.System.Data.DataColumn("LabourFacRegisterDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacRegisterDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLabourFacID}, true))
            Me.columnLabourFacID.AutoIncrement = true
            Me.columnLabourFacID.AutoIncrementSeed = -1
            Me.columnLabourFacID.AutoIncrementStep = -1
            Me.columnLabourFacID.AllowDBNull = false
            Me.columnLabourFacID.ReadOnly = true
            Me.columnLabourFacID.Unique = true
            Me.columnLabourFacName.MaxLength = 150
            Me.columnLabourPhone.MaxLength = 50
            Me.columnLabourFacAddress.MaxLength = 50
            Me.columnLabourFacEmail.MaxLength = 50
            Me.columnLabourFacFax.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblLabourFactoryRow() As tblLabourFactoryRow
            Return CType(Me.NewRow,tblLabourFactoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblLabourFactoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblLabourFactoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblLabourFactoryRowChangedEvent) Is Nothing) Then
                RaiseEvent tblLabourFactoryRowChanged(Me, New tblLabourFactoryRowChangeEvent(CType(e.Row,tblLabourFactoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblLabourFactoryRowChangingEvent) Is Nothing) Then
                RaiseEvent tblLabourFactoryRowChanging(Me, New tblLabourFactoryRowChangeEvent(CType(e.Row,tblLabourFactoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblLabourFactoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblLabourFactoryRowDeleted(Me, New tblLabourFactoryRowChangeEvent(CType(e.Row,tblLabourFactoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblLabourFactoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblLabourFactoryRowDeleting(Me, New tblLabourFactoryRowChangeEvent(CType(e.Row,tblLabourFactoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblLabourFactoryRow(ByVal row As tblLabourFactoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInventoryClinic = New DSInventoryClinic
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblLabourFactoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RECEIVE_ITEM_TEM_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableRECEIVE_ITEM_TEM_DETAIL As RECEIVE_ITEM_TEM_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRECEIVE_ITEM_TEM_DETAIL = CType(Me.Table,RECEIVE_ITEM_TEM_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVETEM_ID() As Decimal
            Get
                Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVETEM_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVETEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVEID' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_QTY' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_PRICE' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_MEASURE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_MEASUREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_MEASURE' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_MEASUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_EXPIRYDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_EXPIRYDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_EXPIRYDATE' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_EXPIRYDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.TOTAL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.TOTAL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'RECEIVE_ITEM_TEM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVEIDNull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVEIDNull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.RECEIVEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_QTYNull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_QTYNull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_PRICENull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_PRICENull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_MEASURENull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_MEASUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_MEASURENull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_MEASUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_EXPIRYDATENull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_EXPIRYDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_EXPIRYDATENull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_EXPIRYDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.TOTAL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNTNull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.TOTAL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableRECEIVE_ITEM_TEM_DETAIL.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblItemRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblItem As tblItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblItem = CType(Me.Table,tblItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Return CType(Me(Me.tabletblItem.ItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItem.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CateIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CateIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemUnitID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemUnitIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemUnitID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemUnitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.LabourFacIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.LabourFacIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDescription' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemRegisterDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemRegisterDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemRegisterDate' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemRegisterDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.VendorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.VendorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContainerID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ContainerIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContainerID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ContainerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.UnitPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.PictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonatorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.DonatorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonatorID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.DonatorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsMedicine() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.IsMedicineColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsMedicine' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.IsMedicineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrencyID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CurrencyIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrencyID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CurrencyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExpired() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.DateExpiredColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExpired' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.DateExpiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CountryID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CountryIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountryID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CountryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tabletblItem.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CateIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateIDNull()
            Me(Me.tabletblItem.CateIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemUnitIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemUnitIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemUnitIDNull()
            Me(Me.tabletblItem.ItemUnitIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.LabourFacIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacIDNull()
            Me(Me.tabletblItem.LabourFacIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tabletblItem.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescriptionNull()
            Me(Me.tabletblItem.ItemDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemRegisterDateNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemRegisterDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemRegisterDateNull()
            Me(Me.tabletblItem.ItemRegisterDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tabletblItem.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.VendorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorIDNull()
            Me(Me.tabletblItem.VendorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContainerIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ContainerIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContainerIDNull()
            Me(Me.tabletblItem.ContainerIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tabletblItem.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tabletblItem.PictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonatorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.DonatorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonatorIDNull()
            Me(Me.tabletblItem.DonatorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsMedicineNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.IsMedicineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsMedicineNull()
            Me(Me.tabletblItem.IsMedicineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CurrencyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyIDNull()
            Me(Me.tabletblItem.CurrencyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExpiredNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.DateExpiredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExpiredNull()
            Me(Me.tabletblItem.DateExpiredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CountryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryIDNull()
            Me(Me.tabletblItem.CountryIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ITEM_RECIEVE_DETIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableITEM_RECIEVE_DETIAL As ITEM_RECIEVE_DETIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEM_RECIEVE_DETIAL = CType(Me.Table,ITEM_RECIEVE_DETIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_DETIAL_ID() As Decimal
            Get
                Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_DETIAL_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_DETIAL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_ID' in table 'ITEM_RECIEVE_DETIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'ITEM_RECIEVE_DETIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'ITEM_RECIEVE_DETIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_MEASURE() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_MEASUREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_MEASURE' in table 'ITEM_RECIEVE_DETIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_MEASUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_EXPIRYT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_EXPIRYTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_EXPIRYT' in table 'ITEM_RECIEVE_DETIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_EXPIRYTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_RECEIVE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_RECEIVE_QTY' in table 'ITEM_RECIEVE_DETIAL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_RECEIVE_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_RECEIVE_PRICE' in table 'ITEM_RECIEVE_DETIAL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_TOTAL_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_TOTAL_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_TOTAL_PRICE' in table 'ITEM_RECIEVE_DETIAL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_TOTAL_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_IDNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_IDNull()
            Me(Me.tableITEM_RECIEVE_DETIAL.RECEIVE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_MEASURENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_MEASUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_MEASURENull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_MEASUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_EXPIRYTNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_EXPIRYTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_EXPIRYTNull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_EXPIRYTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_RECEIVE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_RECEIVE_QTYNull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_RECEIVE_PRICENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_RECEIVE_PRICENull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_RECEIVE_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_TOTAL_PRICENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_DETIAL.ITEM_TOTAL_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_TOTAL_PRICENull()
            Me(Me.tableITEM_RECIEVE_DETIAL.ITEM_TOTAL_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ITEM_RECIEVE_MASTERRow
        Inherits Global.System.Data.DataRow
        
        Private tableITEM_RECIEVE_MASTER As ITEM_RECIEVE_MASTERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEM_RECIEVE_MASTER = CType(Me.Table,ITEM_RECIEVE_MASTERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_ID() As Decimal
            Get
                Return CType(Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_DATE' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERAN_INVOICE_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERAN_INVOICE_NO' in table 'ITEM_RECIEVE_MASTER' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERAN_INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERAN_INVOICE_DATE' in table 'ITEM_RECIEVE_MASTER' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERAN_DUE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_DUE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERAN_DUE_DATE' in table 'ITEM_RECIEVE_MASTER' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_DUE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERAN_TEAM() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_TEAMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERAN_TEAM' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_TEAMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLY_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLY_NO' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLY_NAME' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLY_INFO() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_INFOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLY_INFO' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_INFOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_EXCLUDE_VAT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_EXCLUDE_VATColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_EXCLUDE_VAT' in table 'ITEM_RECIEVE_MASTER' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_EXCLUDE_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.VATColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VAT' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_INCLUDE_VAT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_INCLUDE_VATColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_INCLUDE_VAT' in table 'ITEM_RECIEVE_MASTER' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_INCLUDE_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEST_DEPOSIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.LEST_DEPOSITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEST_DEPOSIT' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.LEST_DEPOSITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_DUE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_DUEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_DUE' in table 'ITEM_RECIEVE_MASTER' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_DUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_NOTE' in table 'ITEM_RECIEVE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_DATENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.RECEIVE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_DATENull()
            Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERAN_INVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERAN_INVOICE_NONull()
            Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERAN_INVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERAN_INVOICE_DATENull()
            Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERAN_DUE_DATENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.REFERAN_DUE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERAN_DUE_DATENull()
            Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_DUE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERAN_TEAMNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.REFERAN_TEAMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERAN_TEAMNull()
            Me(Me.tableITEM_RECIEVE_MASTER.REFERAN_TEAMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLY_NONull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLY_NONull()
            Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLY_NAMENull()
            Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLY_INFONull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.SUPPLY_INFOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLY_INFONull()
            Me(Me.tableITEM_RECIEVE_MASTER.SUPPLY_INFOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_EXCLUDE_VATNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_EXCLUDE_VATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_EXCLUDE_VATNull()
            Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_EXCLUDE_VATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVATNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.VATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVATNull()
            Me(Me.tableITEM_RECIEVE_MASTER.VATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_INCLUDE_VATNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_INCLUDE_VATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_INCLUDE_VATNull()
            Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_INCLUDE_VATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEST_DEPOSITNull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.LEST_DEPOSITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEST_DEPOSITNull()
            Me(Me.tableITEM_RECIEVE_MASTER.LEST_DEPOSITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_DUENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_DUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_DUENull()
            Me(Me.tableITEM_RECIEVE_MASTER.TOTAL_AMOUNT_DUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_NOTENull() As Boolean
            Return Me.IsNull(Me.tableITEM_RECIEVE_MASTER.RECEIVE_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_NOTENull()
            Me(Me.tableITEM_RECIEVE_MASTER.RECEIVE_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblLabourFactoryRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblLabourFactory As tblLabourFactoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblLabourFactory = CType(Me.Table,tblLabourFactoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacID() As Integer
            Get
                Return CType(Me(Me.tabletblLabourFactory.LabourFacIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourFacNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacName' in table 'tblLabourFactory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourPhone' in table 'tblLabourFactory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourFacAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacAddress' in table 'tblLabourFactory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourFacEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacEmail' in table 'tblLabourFactory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacFax() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourFacFaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacFax' in table 'tblLabourFactory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacFaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacRegisterDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblLabourFactory.LabourFacRegisterDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacRegisterDate' in table 'tblLabourFactory' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLabourFactory.LabourFacRegisterDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacNameNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourFacNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacNameNull()
            Me(Me.tabletblLabourFactory.LabourFacNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourPhoneNull()
            Me(Me.tabletblLabourFactory.LabourPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourFacAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacAddressNull()
            Me(Me.tabletblLabourFactory.LabourFacAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourFacEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacEmailNull()
            Me(Me.tabletblLabourFactory.LabourFacEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacFaxNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourFacFaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacFaxNull()
            Me(Me.tabletblLabourFactory.LabourFacFaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacRegisterDateNull() As Boolean
            Return Me.IsNull(Me.tabletblLabourFactory.LabourFacRegisterDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacRegisterDateNull()
            Me(Me.tabletblLabourFactory.LabourFacRegisterDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RECEIVE_ITEM_TEM_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RECEIVE_ITEM_TEM_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RECEIVE_ITEM_TEM_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RECEIVE_ITEM_TEM_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ITEM_RECIEVE_DETIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEM_RECIEVE_DETIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ITEM_RECIEVE_DETIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ITEM_RECIEVE_DETIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ITEM_RECIEVE_MASTERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEM_RECIEVE_MASTERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ITEM_RECIEVE_MASTERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ITEM_RECIEVE_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblLabourFactoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblLabourFactoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblLabourFactoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblLabourFactoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSInventoryClinicTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RECEIVE_ITEM_TEM_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RECEIVE_ITEM_TEM_DETAIL"
            tableMapping.ColumnMappings.Add("RECEIVETEM_ID", "RECEIVETEM_ID")
            tableMapping.ColumnMappings.Add("RECEIVEID", "RECEIVEID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("ITEM_QTY", "ITEM_QTY")
            tableMapping.ColumnMappings.Add("ITEM_PRICE", "ITEM_PRICE")
            tableMapping.ColumnMappings.Add("ITEM_MEASURE", "ITEM_MEASURE")
            tableMapping.ColumnMappings.Add("ITEM_EXPIRYDATE", "ITEM_EXPIRYDATE")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT", "TOTAL_AMOUNT")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RECEIVE_ITEM_TEM_DETAIL] WHERE (([RECEIVETEM_ID] = @Original_RECEIVE"& _ 
                "TEM_ID) AND ((@IsNull_RECEIVEID = 1 AND [RECEIVEID] IS NULL) OR ([RECEIVEID] = @"& _ 
                "Original_RECEIVEID)) AND ((@IsNull_ITEM_NAME = 1 AND [ITEM_NAME] IS NULL) OR ([I"& _ 
                "TEM_NAME] = @Original_ITEM_NAME)) AND ((@IsNull_ITEM_QTY = 1 AND [ITEM_QTY] IS N"& _ 
                "ULL) OR ([ITEM_QTY] = @Original_ITEM_QTY)) AND ((@IsNull_ITEM_PRICE = 1 AND [ITE"& _ 
                "M_PRICE] IS NULL) OR ([ITEM_PRICE] = @Original_ITEM_PRICE)) AND ((@IsNull_ITEM_M"& _ 
                "EASURE = 1 AND [ITEM_MEASURE] IS NULL) OR ([ITEM_MEASURE] = @Original_ITEM_MEASU"& _ 
                "RE)) AND ((@IsNull_ITEM_EXPIRYDATE = 1 AND [ITEM_EXPIRYDATE] IS NULL) OR ([ITEM_"& _ 
                "EXPIRYDATE] = @Original_ITEM_EXPIRYDATE)) AND ((@IsNull_TOTAL_AMOUNT = 1 AND [TO"& _ 
                "TAL_AMOUNT] IS NULL) OR ([TOTAL_AMOUNT] = @Original_TOTAL_AMOUNT)) AND ((@IsNull"& _ 
                "_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVETEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVETEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVEID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_MEASURE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RECEIVE_ITEM_TEM_DETAIL] ([RECEIVEID], [ITEM_NAME], [ITEM_QTY], [ITE"& _ 
                "M_PRICE], [ITEM_MEASURE], [ITEM_EXPIRYDATE], [TOTAL_AMOUNT], [ITEM_ID]) VALUES ("& _ 
                "@RECEIVEID, @ITEM_NAME, @ITEM_QTY, @ITEM_PRICE, @ITEM_MEASURE, @ITEM_EXPIRYDATE,"& _ 
                " @TOTAL_AMOUNT, @ITEM_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVETEM_ID, RECEIVEID, ITEM_NAME, ITEM_QTY"& _ 
                ", ITEM_PRICE, ITEM_MEASURE, ITEM_EXPIRYDATE, TOTAL_AMOUNT, ITEM_ID FROM RECEIVE_"& _ 
                "ITEM_TEM_DETAIL WHERE (RECEIVETEM_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVEID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RECEIVE_ITEM_TEM_DETAIL] SET [RECEIVEID] = @RECEIVEID, [ITEM_NAME] = @ITE"& _ 
                "M_NAME, [ITEM_QTY] = @ITEM_QTY, [ITEM_PRICE] = @ITEM_PRICE, [ITEM_MEASURE] = @IT"& _ 
                "EM_MEASURE, [ITEM_EXPIRYDATE] = @ITEM_EXPIRYDATE, [TOTAL_AMOUNT] = @TOTAL_AMOUNT"& _ 
                ", [ITEM_ID] = @ITEM_ID WHERE (([RECEIVETEM_ID] = @Original_RECEIVETEM_ID) AND (("& _ 
                "@IsNull_RECEIVEID = 1 AND [RECEIVEID] IS NULL) OR ([RECEIVEID] = @Original_RECEI"& _ 
                "VEID)) AND ((@IsNull_ITEM_NAME = 1 AND [ITEM_NAME] IS NULL) OR ([ITEM_NAME] = @O"& _ 
                "riginal_ITEM_NAME)) AND ((@IsNull_ITEM_QTY = 1 AND [ITEM_QTY] IS NULL) OR ([ITEM"& _ 
                "_QTY] = @Original_ITEM_QTY)) AND ((@IsNull_ITEM_PRICE = 1 AND [ITEM_PRICE] IS NU"& _ 
                "LL) OR ([ITEM_PRICE] = @Original_ITEM_PRICE)) AND ((@IsNull_ITEM_MEASURE = 1 AND"& _ 
                " [ITEM_MEASURE] IS NULL) OR ([ITEM_MEASURE] = @Original_ITEM_MEASURE)) AND ((@Is"& _ 
                "Null_ITEM_EXPIRYDATE = 1 AND [ITEM_EXPIRYDATE] IS NULL) OR ([ITEM_EXPIRYDATE] = "& _ 
                "@Original_ITEM_EXPIRYDATE)) AND ((@IsNull_TOTAL_AMOUNT = 1 AND [TOTAL_AMOUNT] IS"& _ 
                " NULL) OR ([TOTAL_AMOUNT] = @Original_TOTAL_AMOUNT)) AND ((@IsNull_ITEM_ID = 1 A"& _ 
                "ND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVETEM_I"& _ 
                "D, RECEIVEID, ITEM_NAME, ITEM_QTY, ITEM_PRICE, ITEM_MEASURE, ITEM_EXPIRYDATE, TO"& _ 
                "TAL_AMOUNT, ITEM_ID FROM RECEIVE_ITEM_TEM_DETAIL WHERE (RECEIVETEM_ID = @RECEIVE"& _ 
                "TEM_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVEID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVETEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVETEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVEID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_MEASURE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVETEM_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVETEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.HospitalMS.My.MySettings.Default.AppConnection
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RECEIVETEM_ID, RECEIVEID, ITEM_NAME, ITEM_QTY, ITEM_PRICE, ITEM_MEA"& _ 
                "SURE, ITEM_EXPIRYDATE, TOTAL_AMOUNT, ITEM_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RECEIVE_ITEM_TEM_D"& _ 
                "ETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO RECEIVE_ITEM_TEM_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (RECEIVEID, ITEM_NA"& _ 
                "ME, ITEM_QTY, ITEM_PRICE, ITEM_MEASURE, ITEM_EXPIRYDATE, TOTAL_AMOUNT, ITEM_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@RECEIVEID,@ITEM_NAME,@ITEM_QTY,@ITEM_PRICE,@ITEM_MEASURE,@ITEM_"& _ 
                "EXPIRYDATE,@TOTAL_AMOUNT,@ITEM_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVEID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_QTY", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYDATE", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInventoryClinic.RECEIVE_ITEM_TEM_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInventoryClinic.RECEIVE_ITEM_TEM_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInventoryClinic.RECEIVE_ITEM_TEM_DETAILDataTable = New DSInventoryClinic.RECEIVE_ITEM_TEM_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInventoryClinic.RECEIVE_ITEM_TEM_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInventoryClinic) As Integer
            Return Me.Adapter.Update(dataSet, "RECEIVE_ITEM_TEM_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RECEIVETEM_ID As Decimal, ByVal Original_RECEIVEID As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_QTY As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_MEASURE As String, ByVal Original_ITEM_EXPIRYDATE As Global.System.Nullable(Of Date), ByVal Original_TOTAL_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RECEIVETEM_ID,Decimal)
            If (Original_RECEIVEID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RECEIVEID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ITEM_QTY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_MEASURE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ITEM_MEASURE,String)
            End If
            If (Original_ITEM_EXPIRYDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ITEM_EXPIRYDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_TOTAL_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RECEIVEID As Global.System.Nullable(Of Decimal), ByVal ITEM_NAME As String, ByVal ITEM_QTY As Global.System.Nullable(Of Decimal), ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYDATE As Global.System.Nullable(Of Date), ByVal TOTAL_AMOUNT As Global.System.Nullable(Of Decimal), ByVal ITEM_ID As Global.System.Nullable(Of Decimal)) As Integer
            If (RECEIVEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RECEIVEID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ITEM_QTY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ITEM_MEASURE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ITEM_EXPIRYDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TOTAL_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVEID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_NAME As String,  _
                    ByVal ITEM_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_MEASURE As String,  _
                    ByVal ITEM_EXPIRYDATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVETEM_ID As Decimal,  _
                    ByVal Original_RECEIVEID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_NAME As String,  _
                    ByVal Original_ITEM_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_MEASURE As String,  _
                    ByVal Original_ITEM_EXPIRYDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_TOTAL_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVETEM_ID As Decimal) As Integer
            If (RECEIVEID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RECEIVEID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ITEM_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ITEM_MEASURE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ITEM_EXPIRYDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TOTAL_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_RECEIVETEM_ID,Decimal)
            If (Original_RECEIVEID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_RECEIVEID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ITEM_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_MEASURE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ITEM_MEASURE,String)
            End If
            If (Original_ITEM_EXPIRYDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ITEM_EXPIRYDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TOTAL_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(RECEIVETEM_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVEID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_NAME As String,  _
                    ByVal ITEM_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_MEASURE As String,  _
                    ByVal ITEM_EXPIRYDATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVETEM_ID As Decimal,  _
                    ByVal Original_RECEIVEID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_NAME As String,  _
                    ByVal Original_ITEM_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_MEASURE As String,  _
                    ByVal Original_ITEM_EXPIRYDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_TOTAL_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(RECEIVEID, ITEM_NAME, ITEM_QTY, ITEM_PRICE, ITEM_MEASURE, ITEM_EXPIRYDATE, TOTAL_AMOUNT, ITEM_ID, Original_RECEIVETEM_ID, Original_RECEIVEID, Original_ITEM_NAME, Original_ITEM_QTY, Original_ITEM_PRICE, Original_ITEM_MEASURE, Original_ITEM_EXPIRYDATE, Original_TOTAL_AMOUNT, Original_ITEM_ID, Original_RECEIVETEM_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertReceiveItemTem(ByVal RECEIVEID As Global.System.Nullable(Of Decimal), ByVal ITEM_NAME As String, ByVal ITEM_QTY As Global.System.Nullable(Of Decimal), ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYDATE As String, ByVal TOTAL_AMOUNT As Global.System.Nullable(Of Decimal), ByVal ITEM_ID As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (RECEIVEID.HasValue = true) Then
                command.Parameters(0).Value = CType(RECEIVEID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_QTY.HasValue = true) Then
                command.Parameters(2).Value = CType(ITEM_QTY.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_PRICE.HasValue = true) Then
                command.Parameters(3).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ITEM_MEASURE Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYDATE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(ITEM_EXPIRYDATE,String)
            End If
            If (TOTAL_AMOUNT.HasValue = true) Then
                command.Parameters(6).Value = CType(TOTAL_AMOUNT.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(7).Value = CType(ITEM_ID.Value,Decimal)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblItem"
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("CateID", "CateID")
            tableMapping.ColumnMappings.Add("ItemUnitID", "ItemUnitID")
            tableMapping.ColumnMappings.Add("LabourFacID", "LabourFacID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("ItemDescription", "ItemDescription")
            tableMapping.ColumnMappings.Add("ItemRegisterDate", "ItemRegisterDate")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("VendorID", "VendorID")
            tableMapping.ColumnMappings.Add("ContainerID", "ContainerID")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("Picture", "Picture")
            tableMapping.ColumnMappings.Add("DonatorID", "DonatorID")
            tableMapping.ColumnMappings.Add("IsMedicine", "IsMedicine")
            tableMapping.ColumnMappings.Add("CurrencyID", "CurrencyID")
            tableMapping.ColumnMappings.Add("DateExpired", "DateExpired")
            tableMapping.ColumnMappings.Add("CountryID", "CountryID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [tblItem] WHERE (([ItemID] = @Original_ItemID) AND ((@IsNull_ItemCode"& _ 
                " = 1 AND [ItemCode] IS NULL) OR ([ItemCode] = @Original_ItemCode)) AND ((@IsNull"& _ 
                "_CateID = 1 AND [CateID] IS NULL) OR ([CateID] = @Original_CateID)) AND ((@IsNul"& _ 
                "l_ItemUnitID = 1 AND [ItemUnitID] IS NULL) OR ([ItemUnitID] = @Original_ItemUnit"& _ 
                "ID)) AND ((@IsNull_LabourFacID = 1 AND [LabourFacID] IS NULL) OR ([LabourFacID] "& _ 
                "= @Original_LabourFacID)) AND ((@IsNull_ItemName = 1 AND [ItemName] IS NULL) OR "& _ 
                "([ItemName] = @Original_ItemName)) AND ((@IsNull_ItemDescription = 1 AND [ItemDe"& _ 
                "scription] IS NULL) OR ([ItemDescription] = @Original_ItemDescription)) AND ((@I"& _ 
                "sNull_ItemRegisterDate = 1 AND [ItemRegisterDate] IS NULL) OR ([ItemRegisterDate"& _ 
                "] = @Original_ItemRegisterDate)) AND ((@IsNull_Barcode = 1 AND [Barcode] IS NULL"& _ 
                ") OR ([Barcode] = @Original_Barcode)) AND ((@IsNull_VendorID = 1 AND [VendorID] "& _ 
                "IS NULL) OR ([VendorID] = @Original_VendorID)) AND ((@IsNull_ContainerID = 1 AND"& _ 
                " [ContainerID] IS NULL) OR ([ContainerID] = @Original_ContainerID)) AND ((@IsNul"& _ 
                "l_UnitPrice = 1 AND [UnitPrice] IS NULL) OR ([UnitPrice] = @Original_UnitPrice))"& _ 
                " AND ((@IsNull_DonatorID = 1 AND [DonatorID] IS NULL) OR ([DonatorID] = @Origina"& _ 
                "l_DonatorID)) AND ((@IsNull_IsMedicine = 1 AND [IsMedicine] IS NULL) OR ([IsMedi"& _ 
                "cine] = @Original_IsMedicine)) AND ((@IsNull_CurrencyID = 1 AND [CurrencyID] IS "& _ 
                "NULL) OR ([CurrencyID] = @Original_CurrencyID)) AND ((@IsNull_DateExpired = 1 AN"& _ 
                "D [DateExpired] IS NULL) OR ([DateExpired] = @Original_DateExpired)) AND ((@IsNu"& _ 
                "ll_CountryID = 1 AND [CountryID] IS NULL) OR ([CountryID] = @Original_CountryID)"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemDescription", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnitPrice", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnitPrice", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsMedicine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrencyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CountryID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tblItem] ([ItemCode], [CateID], [ItemUnitID], [LabourFacID], [ItemNa"& _ 
                "me], [ItemDescription], [ItemRegisterDate], [Barcode], [VendorID], [ContainerID]"& _ 
                ", [UnitPrice], [Picture], [DonatorID], [IsMedicine], [CurrencyID], [DateExpired]"& _ 
                ", [CountryID]) VALUES (@ItemCode, @CateID, @ItemUnitID, @LabourFacID, @ItemName,"& _ 
                " @ItemDescription, @ItemRegisterDate, @Barcode, @VendorID, @ContainerID, @UnitPr"& _ 
                "ice, @Picture, @DonatorID, @IsMedicine, @CurrencyID, @DateExpired, @CountryID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ItemID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescrip"& _ 
                "tion, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, Dona"& _ 
                "torID, IsMedicine, CurrencyID, DateExpired, CountryID FROM tblItem WHERE (ItemID"& _ 
                " = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Picture", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Picture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [tblItem] SET [ItemCode] = @ItemCode, [CateID] = @CateID, [ItemUnitID] = @"& _ 
                "ItemUnitID, [LabourFacID] = @LabourFacID, [ItemName] = @ItemName, [ItemDescripti"& _ 
                "on] = @ItemDescription, [ItemRegisterDate] = @ItemRegisterDate, [Barcode] = @Bar"& _ 
                "code, [VendorID] = @VendorID, [ContainerID] = @ContainerID, [UnitPrice] = @UnitP"& _ 
                "rice, [Picture] = @Picture, [DonatorID] = @DonatorID, [IsMedicine] = @IsMedicine"& _ 
                ", [CurrencyID] = @CurrencyID, [DateExpired] = @DateExpired, [CountryID] = @Count"& _ 
                "ryID WHERE (([ItemID] = @Original_ItemID) AND ((@IsNull_ItemCode = 1 AND [ItemCo"& _ 
                "de] IS NULL) OR ([ItemCode] = @Original_ItemCode)) AND ((@IsNull_CateID = 1 AND "& _ 
                "[CateID] IS NULL) OR ([CateID] = @Original_CateID)) AND ((@IsNull_ItemUnitID = 1"& _ 
                " AND [ItemUnitID] IS NULL) OR ([ItemUnitID] = @Original_ItemUnitID)) AND ((@IsNu"& _ 
                "ll_LabourFacID = 1 AND [LabourFacID] IS NULL) OR ([LabourFacID] = @Original_Labo"& _ 
                "urFacID)) AND ((@IsNull_ItemName = 1 AND [ItemName] IS NULL) OR ([ItemName] = @O"& _ 
                "riginal_ItemName)) AND ((@IsNull_ItemDescription = 1 AND [ItemDescription] IS NU"& _ 
                "LL) OR ([ItemDescription] = @Original_ItemDescription)) AND ((@IsNull_ItemRegist"& _ 
                "erDate = 1 AND [ItemRegisterDate] IS NULL) OR ([ItemRegisterDate] = @Original_It"& _ 
                "emRegisterDate)) AND ((@IsNull_Barcode = 1 AND [Barcode] IS NULL) OR ([Barcode] "& _ 
                "= @Original_Barcode)) AND ((@IsNull_VendorID = 1 AND [VendorID] IS NULL) OR ([Ve"& _ 
                "ndorID] = @Original_VendorID)) AND ((@IsNull_ContainerID = 1 AND [ContainerID] I"& _ 
                "S NULL) OR ([ContainerID] = @Original_ContainerID)) AND ((@IsNull_UnitPrice = 1 "& _ 
                "AND [UnitPrice] IS NULL) OR ([UnitPrice] = @Original_UnitPrice)) AND ((@IsNull_D"& _ 
                "onatorID = 1 AND [DonatorID] IS NULL) OR ([DonatorID] = @Original_DonatorID)) AN"& _ 
                "D ((@IsNull_IsMedicine = 1 AND [IsMedicine] IS NULL) OR ([IsMedicine] = @Origina"& _ 
                "l_IsMedicine)) AND ((@IsNull_CurrencyID = 1 AND [CurrencyID] IS NULL) OR ([Curre"& _ 
                "ncyID] = @Original_CurrencyID)) AND ((@IsNull_DateExpired = 1 AND [DateExpired] "& _ 
                "IS NULL) OR ([DateExpired] = @Original_DateExpired)) AND ((@IsNull_CountryID = 1"& _ 
                " AND [CountryID] IS NULL) OR ([CountryID] = @Original_CountryID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Item"& _ 
                "ID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, ItemRe"& _ 
                "gisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID, IsMed"& _ 
                "icine, CurrencyID, DateExpired, CountryID FROM tblItem WHERE (ItemID = @ItemID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Picture", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Picture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemDescription", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnitPrice", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnitPrice", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsMedicine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrencyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CountryID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.HospitalMS.My.MySettings.Default.AppConnection
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ItemID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDe"& _ 
                "scription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture,"& _ 
                " DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblI"& _ 
                "tem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInventoryClinic.tblItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInventoryClinic.tblItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInventoryClinic.tblItemDataTable = New DSInventoryClinic.tblItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInventoryClinic.tblItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInventoryClinic) As Integer
            Return Me.Adapter.Update(dataSet, "tblItem")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ItemID,Integer)
            If (Original_ItemCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ItemCode,String)
            End If
            If (Original_CateID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CateID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemUnitID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ItemUnitID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_LabourFacID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LabourFacID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ItemName,String)
            End If
            If (Original_ItemDescription Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ItemDescription,String)
            End If
            If (Original_ItemRegisterDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Barcode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Barcode,String)
            End If
            If (Original_VendorID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_VendorID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ContainerID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ContainerID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitPrice.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_UnitPrice.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_DonatorID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DonatorID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_IsMedicine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IsMedicine.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrencyID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_CurrencyID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpired.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_DateExpired.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_CountryID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_CountryID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal)) As Integer
            If (ItemCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ItemCode,String)
            End If
            If (CateID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ItemUnitID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ItemUnitID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LabourFacID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LabourFacID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ItemName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ItemName,String)
            End If
            If (ItemDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ItemDescription,String)
            End If
            If (ItemRegisterDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Barcode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Barcode,String)
            End If
            If (VendorID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(VendorID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ContainerID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ContainerID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UnitPrice.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(UnitPrice.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Picture,Byte())
            End If
            If (DonatorID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DonatorID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IsMedicine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IsMedicine.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CurrencyID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CurrencyID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DateExpired.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DateExpired.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CountryID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CountryID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal ItemID As Integer) As Integer
            If (ItemCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ItemCode,String)
            End If
            If (CateID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ItemUnitID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ItemUnitID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LabourFacID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LabourFacID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ItemName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ItemName,String)
            End If
            If (ItemDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ItemDescription,String)
            End If
            If (ItemRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Barcode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Barcode,String)
            End If
            If (VendorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(VendorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ContainerID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ContainerID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UnitPrice.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UnitPrice.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Picture,Byte())
            End If
            If (DonatorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DonatorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IsMedicine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IsMedicine.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CurrencyID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CurrencyID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DateExpired.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DateExpired.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CountryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CountryID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ItemID,Integer)
            If (Original_ItemCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ItemCode,String)
            End If
            If (Original_CateID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CateID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemUnitID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ItemUnitID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_LabourFacID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_LabourFacID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ItemName,String)
            End If
            If (Original_ItemDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ItemDescription,String)
            End If
            If (Original_ItemRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_Barcode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Barcode,String)
            End If
            If (Original_VendorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_VendorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_ContainerID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ContainerID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitPrice.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_UnitPrice.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_DonatorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_DonatorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_IsMedicine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IsMedicine.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrencyID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_CurrencyID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpired.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_DateExpired.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_CountryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_CountryID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(ItemID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID, Original_ItemID, Original_ItemCode, Original_CateID, Original_ItemUnitID, Original_LabourFacID, Original_ItemName, Original_ItemDescription, Original_ItemRegisterDate, Original_Barcode, Original_VendorID, Original_ContainerID, Original_UnitPrice, Original_DonatorID, Original_IsMedicine, Original_CurrencyID, Original_DateExpired, Original_CountryID, Original_ItemID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ITEM_RECIEVE_DETIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ITEM_RECIEVE_DETIAL"
            tableMapping.ColumnMappings.Add("RECEIVE_DETIAL_ID", "RECEIVE_DETIAL_ID")
            tableMapping.ColumnMappings.Add("RECEIVE_ID", "RECEIVE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("ITEM_MEASURE", "ITEM_MEASURE")
            tableMapping.ColumnMappings.Add("ITEM_EXPIRYT", "ITEM_EXPIRYT")
            tableMapping.ColumnMappings.Add("ITEM_RECEIVE_QTY", "ITEM_RECEIVE_QTY")
            tableMapping.ColumnMappings.Add("ITEM_RECEIVE_PRICE", "ITEM_RECEIVE_PRICE")
            tableMapping.ColumnMappings.Add("ITEM_TOTAL_PRICE", "ITEM_TOTAL_PRICE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ITEM_RECIEVE_DETIAL] WHERE (([RECEIVE_DETIAL_ID] = @Original_RECEIVE"& _ 
                "_DETIAL_ID) AND ((@IsNull_RECEIVE_ID = 1 AND [RECEIVE_ID] IS NULL) OR ([RECEIVE_"& _ 
                "ID] = @Original_RECEIVE_ID)) AND ((@IsNull_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR"& _ 
                " ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNull_ITEM_NAME = 1 AND [ITEM_NAME] IS"& _ 
                " NULL) OR ([ITEM_NAME] = @Original_ITEM_NAME)) AND ((@IsNull_ITEM_MEASURE = 1 AN"& _ 
                "D [ITEM_MEASURE] IS NULL) OR ([ITEM_MEASURE] = @Original_ITEM_MEASURE)) AND ((@I"& _ 
                "sNull_ITEM_EXPIRYT = 1 AND [ITEM_EXPIRYT] IS NULL) OR ([ITEM_EXPIRYT] = @Origina"& _ 
                "l_ITEM_EXPIRYT)) AND ((@IsNull_ITEM_RECEIVE_QTY = 1 AND [ITEM_RECEIVE_QTY] IS NU"& _ 
                "LL) OR ([ITEM_RECEIVE_QTY] = @Original_ITEM_RECEIVE_QTY)) AND ((@IsNull_ITEM_REC"& _ 
                "EIVE_PRICE = 1 AND [ITEM_RECEIVE_PRICE] IS NULL) OR ([ITEM_RECEIVE_PRICE] = @Ori"& _ 
                "ginal_ITEM_RECEIVE_PRICE)) AND ((@IsNull_ITEM_TOTAL_PRICE = 1 AND [ITEM_TOTAL_PR"& _ 
                "ICE] IS NULL) OR ([ITEM_TOTAL_PRICE] = @Original_ITEM_TOTAL_PRICE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_DETIAL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_DETIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_MEASURE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_EXPIRYT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_EXPIRYT", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ITEM_RECIEVE_DETIAL] ([RECEIVE_ID], [ITEM_ID], [ITEM_NAME], [ITEM_ME"& _ 
                "ASURE], [ITEM_EXPIRYT], [ITEM_RECEIVE_QTY], [ITEM_RECEIVE_PRICE], [ITEM_TOTAL_PR"& _ 
                "ICE]) VALUES (@RECEIVE_ID, @ITEM_ID, @ITEM_NAME, @ITEM_MEASURE, @ITEM_EXPIRYT, @"& _ 
                "ITEM_RECEIVE_QTY, @ITEM_RECEIVE_PRICE, @ITEM_TOTAL_PRICE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVE_DETIA"& _ 
                "L_ID, RECEIVE_ID, ITEM_ID, ITEM_NAME, ITEM_MEASURE, ITEM_EXPIRYT, ITEM_RECEIVE_Q"& _ 
                "TY, ITEM_RECEIVE_PRICE, ITEM_TOTAL_PRICE FROM ITEM_RECIEVE_DETIAL WHERE (RECEIVE"& _ 
                "_DETIAL_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYT", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ITEM_RECIEVE_DETIAL] SET [RECEIVE_ID] = @RECEIVE_ID, [ITEM_ID] = @ITEM_ID"& _ 
                ", [ITEM_NAME] = @ITEM_NAME, [ITEM_MEASURE] = @ITEM_MEASURE, [ITEM_EXPIRYT] = @IT"& _ 
                "EM_EXPIRYT, [ITEM_RECEIVE_QTY] = @ITEM_RECEIVE_QTY, [ITEM_RECEIVE_PRICE] = @ITEM"& _ 
                "_RECEIVE_PRICE, [ITEM_TOTAL_PRICE] = @ITEM_TOTAL_PRICE WHERE (([RECEIVE_DETIAL_I"& _ 
                "D] = @Original_RECEIVE_DETIAL_ID) AND ((@IsNull_RECEIVE_ID = 1 AND [RECEIVE_ID] "& _ 
                "IS NULL) OR ([RECEIVE_ID] = @Original_RECEIVE_ID)) AND ((@IsNull_ITEM_ID = 1 AND"& _ 
                " [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNull_ITEM_NAME "& _ 
                "= 1 AND [ITEM_NAME] IS NULL) OR ([ITEM_NAME] = @Original_ITEM_NAME)) AND ((@IsNu"& _ 
                "ll_ITEM_MEASURE = 1 AND [ITEM_MEASURE] IS NULL) OR ([ITEM_MEASURE] = @Original_I"& _ 
                "TEM_MEASURE)) AND ((@IsNull_ITEM_EXPIRYT = 1 AND [ITEM_EXPIRYT] IS NULL) OR ([IT"& _ 
                "EM_EXPIRYT] = @Original_ITEM_EXPIRYT)) AND ((@IsNull_ITEM_RECEIVE_QTY = 1 AND [I"& _ 
                "TEM_RECEIVE_QTY] IS NULL) OR ([ITEM_RECEIVE_QTY] = @Original_ITEM_RECEIVE_QTY)) "& _ 
                "AND ((@IsNull_ITEM_RECEIVE_PRICE = 1 AND [ITEM_RECEIVE_PRICE] IS NULL) OR ([ITEM"& _ 
                "_RECEIVE_PRICE] = @Original_ITEM_RECEIVE_PRICE)) AND ((@IsNull_ITEM_TOTAL_PRICE "& _ 
                "= 1 AND [ITEM_TOTAL_PRICE] IS NULL) OR ([ITEM_TOTAL_PRICE] = @Original_ITEM_TOTA"& _ 
                "L_PRICE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVE_DETIAL_ID, RECEIVE_ID, ITEM_ID, ITEM_NAME, ITEM_MEAS"& _ 
                "URE, ITEM_EXPIRYT, ITEM_RECEIVE_QTY, ITEM_RECEIVE_PRICE, ITEM_TOTAL_PRICE FROM I"& _ 
                "TEM_RECIEVE_DETIAL WHERE (RECEIVE_DETIAL_ID = @RECEIVE_DETIAL_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYT", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_DETIAL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_DETIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_MEASURE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_EXPIRYT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_EXPIRYT", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_DETIAL_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_DETIAL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.HospitalMS.My.MySettings.Default.AppConnection
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RECEIVE_DETIAL_ID, RECEIVE_ID, ITEM_ID, ITEM_NAME, ITEM_MEASURE, IT"& _ 
                "EM_EXPIRYT, ITEM_RECEIVE_QTY, ITEM_RECEIVE_PRICE, ITEM_TOTAL_PRICE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    ITEM_RECIEVE_DETIAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [ITEM_RECIEVE_DETIAL] ([RECEIVE_ID], [ITEM_ID], [ITEM_NAME], [ITEM_ME"& _ 
                "ASURE], [ITEM_EXPIRYT], [ITEM_RECEIVE_QTY], [ITEM_RECEIVE_PRICE], [ITEM_TOTAL_PR"& _ 
                "ICE]) VALUES (@RECEIVE_ID, @ITEM_ID, @ITEM_NAME, @ITEM_MEASURE, @ITEM_EXPIRYT, @"& _ 
                "ITEM_RECEIVE_QTY, @ITEM_RECEIVE_PRICE, @ITEM_TOTAL_PRICE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_MEASURE", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_MEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_EXPIRYT", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_EXPIRYT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_QTY", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ITEM_RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_RECEIVE_PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_RECEIVE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "ITEM_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInventoryClinic.ITEM_RECIEVE_DETIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInventoryClinic.ITEM_RECIEVE_DETIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInventoryClinic.ITEM_RECIEVE_DETIALDataTable = New DSInventoryClinic.ITEM_RECIEVE_DETIALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInventoryClinic.ITEM_RECIEVE_DETIALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInventoryClinic) As Integer
            Return Me.Adapter.Update(dataSet, "ITEM_RECIEVE_DETIAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RECEIVE_DETIAL_ID As Decimal, ByVal Original_RECEIVE_ID As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_MEASURE As String, ByVal Original_ITEM_EXPIRYT As Global.System.Nullable(Of Date), ByVal Original_ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RECEIVE_DETIAL_ID,Decimal)
            If (Original_RECEIVE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RECEIVE_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_MEASURE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ITEM_MEASURE,String)
            End If
            If (Original_ITEM_EXPIRYT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ITEM_EXPIRYT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ITEM_RECEIVE_QTY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_RECEIVE_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ITEM_RECEIVE_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ITEM_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RECEIVE_ID As Global.System.Nullable(Of Decimal), ByVal ITEM_ID As Global.System.Nullable(Of Decimal), ByVal ITEM_NAME As String, ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYT As Global.System.Nullable(Of Date), ByVal ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal), ByVal ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            If (RECEIVE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RECEIVE_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_MEASURE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ITEM_EXPIRYT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ITEM_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ITEM_RECEIVE_QTY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ITEM_RECEIVE_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ITEM_RECEIVE_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ITEM_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_NAME As String,  _
                    ByVal ITEM_MEASURE As String,  _
                    ByVal ITEM_EXPIRYT As Global.System.Nullable(Of Date),  _
                    ByVal ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVE_DETIAL_ID As Decimal,  _
                    ByVal Original_RECEIVE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_NAME As String,  _
                    ByVal Original_ITEM_MEASURE As String,  _
                    ByVal Original_ITEM_EXPIRYT As Global.System.Nullable(Of Date),  _
                    ByVal Original_ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVE_DETIAL_ID As Decimal) As Integer
            If (RECEIVE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RECEIVE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_MEASURE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ITEM_EXPIRYT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ITEM_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ITEM_RECEIVE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ITEM_RECEIVE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ITEM_RECEIVE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ITEM_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_RECEIVE_DETIAL_ID,Decimal)
            If (Original_RECEIVE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_RECEIVE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ITEM_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_MEASURE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ITEM_MEASURE,String)
            End If
            If (Original_ITEM_EXPIRYT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ITEM_EXPIRYT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ITEM_RECEIVE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_RECEIVE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ITEM_RECEIVE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ITEM_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(RECEIVE_DETIAL_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_NAME As String,  _
                    ByVal ITEM_MEASURE As String,  _
                    ByVal ITEM_EXPIRYT As Global.System.Nullable(Of Date),  _
                    ByVal ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVE_DETIAL_ID As Decimal,  _
                    ByVal Original_RECEIVE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_NAME As String,  _
                    ByVal Original_ITEM_MEASURE As String,  _
                    ByVal Original_ITEM_EXPIRYT As Global.System.Nullable(Of Date),  _
                    ByVal Original_ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(RECEIVE_ID, ITEM_ID, ITEM_NAME, ITEM_MEASURE, ITEM_EXPIRYT, ITEM_RECEIVE_QTY, ITEM_RECEIVE_PRICE, ITEM_TOTAL_PRICE, Original_RECEIVE_DETIAL_ID, Original_RECEIVE_ID, Original_ITEM_ID, Original_ITEM_NAME, Original_ITEM_MEASURE, Original_ITEM_EXPIRYT, Original_ITEM_RECEIVE_QTY, Original_ITEM_RECEIVE_PRICE, Original_ITEM_TOTAL_PRICE, Original_RECEIVE_DETIAL_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewItemReceiveDetial(ByVal RECEIVE_ID As Global.System.Nullable(Of Decimal), ByVal ITEM_ID As Global.System.Nullable(Of Decimal), ByVal ITEM_NAME As String, ByVal ITEM_MEASURE As String, ByVal ITEM_EXPIRYT As String, ByVal ITEM_RECEIVE_QTY As Global.System.Nullable(Of Decimal), ByVal ITEM_RECEIVE_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (RECEIVE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(RECEIVE_ID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_ID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_MEASURE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ITEM_MEASURE,String)
            End If
            If (ITEM_EXPIRYT Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(ITEM_EXPIRYT,String)
            End If
            If (ITEM_RECEIVE_QTY.HasValue = true) Then
                command.Parameters(5).Value = CType(ITEM_RECEIVE_QTY.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ITEM_RECEIVE_PRICE.HasValue = true) Then
                command.Parameters(6).Value = CType(ITEM_RECEIVE_PRICE.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ITEM_TOTAL_PRICE.HasValue = true) Then
                command.Parameters(7).Value = CType(ITEM_TOTAL_PRICE.Value,Decimal)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ITEM_RECIEVE_MASTERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ITEM_RECIEVE_MASTER"
            tableMapping.ColumnMappings.Add("RECEIVE_ID", "RECEIVE_ID")
            tableMapping.ColumnMappings.Add("RECEIVE_DATE", "RECEIVE_DATE")
            tableMapping.ColumnMappings.Add("REFERAN_INVOICE_NO", "REFERAN_INVOICE_NO")
            tableMapping.ColumnMappings.Add("REFERAN_INVOICE_DATE", "REFERAN_INVOICE_DATE")
            tableMapping.ColumnMappings.Add("REFERAN_DUE_DATE", "REFERAN_DUE_DATE")
            tableMapping.ColumnMappings.Add("REFERAN_TEAM", "REFERAN_TEAM")
            tableMapping.ColumnMappings.Add("SUPPLY_NO", "SUPPLY_NO")
            tableMapping.ColumnMappings.Add("SUPPLY_NAME", "SUPPLY_NAME")
            tableMapping.ColumnMappings.Add("SUPPLY_INFO", "SUPPLY_INFO")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_EXCLUDE_VAT", "TOTAL_AMOUNT_EXCLUDE_VAT")
            tableMapping.ColumnMappings.Add("VAT", "VAT")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_INCLUDE_VAT", "TOTAL_AMOUNT_INCLUDE_VAT")
            tableMapping.ColumnMappings.Add("LEST_DEPOSIT", "LEST_DEPOSIT")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_DUE", "TOTAL_AMOUNT_DUE")
            tableMapping.ColumnMappings.Add("RECEIVE_NOTE", "RECEIVE_NOTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ITEM_RECIEVE_MASTER] WHERE (([RECEIVE_ID] = @Original_RECEIVE_ID) AN"& _ 
                "D ((@IsNull_RECEIVE_DATE = 1 AND [RECEIVE_DATE] IS NULL) OR ([RECEIVE_DATE] = @O"& _ 
                "riginal_RECEIVE_DATE)) AND ((@IsNull_REFERAN_INVOICE_NO = 1 AND [REFERAN_INVOICE"& _ 
                "_NO] IS NULL) OR ([REFERAN_INVOICE_NO] = @Original_REFERAN_INVOICE_NO)) AND ((@I"& _ 
                "sNull_REFERAN_INVOICE_DATE = 1 AND [REFERAN_INVOICE_DATE] IS NULL) OR ([REFERAN_"& _ 
                "INVOICE_DATE] = @Original_REFERAN_INVOICE_DATE)) AND ((@IsNull_REFERAN_DUE_DATE "& _ 
                "= 1 AND [REFERAN_DUE_DATE] IS NULL) OR ([REFERAN_DUE_DATE] = @Original_REFERAN_D"& _ 
                "UE_DATE)) AND ((@IsNull_REFERAN_TEAM = 1 AND [REFERAN_TEAM] IS NULL) OR ([REFERA"& _ 
                "N_TEAM] = @Original_REFERAN_TEAM)) AND ((@IsNull_SUPPLY_NO = 1 AND [SUPPLY_NO] I"& _ 
                "S NULL) OR ([SUPPLY_NO] = @Original_SUPPLY_NO)) AND ((@IsNull_SUPPLY_NAME = 1 AN"& _ 
                "D [SUPPLY_NAME] IS NULL) OR ([SUPPLY_NAME] = @Original_SUPPLY_NAME)) AND ((@IsNu"& _ 
                "ll_SUPPLY_INFO = 1 AND [SUPPLY_INFO] IS NULL) OR ([SUPPLY_INFO] = @Original_SUPP"& _ 
                "LY_INFO)) AND ((@IsNull_TOTAL_AMOUNT_EXCLUDE_VAT = 1 AND [TOTAL_AMOUNT_EXCLUDE_V"& _ 
                "AT] IS NULL) OR ([TOTAL_AMOUNT_EXCLUDE_VAT] = @Original_TOTAL_AMOUNT_EXCLUDE_VAT"& _ 
                ")) AND ((@IsNull_VAT = 1 AND [VAT] IS NULL) OR ([VAT] = @Original_VAT)) AND ((@I"& _ 
                "sNull_TOTAL_AMOUNT_INCLUDE_VAT = 1 AND [TOTAL_AMOUNT_INCLUDE_VAT] IS NULL) OR (["& _ 
                "TOTAL_AMOUNT_INCLUDE_VAT] = @Original_TOTAL_AMOUNT_INCLUDE_VAT)) AND ((@IsNull_L"& _ 
                "EST_DEPOSIT = 1 AND [LEST_DEPOSIT] IS NULL) OR ([LEST_DEPOSIT] = @Original_LEST_"& _ 
                "DEPOSIT)) AND ((@IsNull_TOTAL_AMOUNT_DUE = 1 AND [TOTAL_AMOUNT_DUE] IS NULL) OR "& _ 
                "([TOTAL_AMOUNT_DUE] = @Original_TOTAL_AMOUNT_DUE)) AND ((@IsNull_RECEIVE_NOTE = "& _ 
                "1 AND [RECEIVE_NOTE] IS NULL) OR ([RECEIVE_NOTE] = @Original_RECEIVE_NOTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_DUE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_DUE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_TEAM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_TEAM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_INFO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LEST_DEPOSIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LEST_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ITEM_RECIEVE_MASTER] ([RECEIVE_DATE], [REFERAN_INVOICE_NO], [REFERAN"& _ 
                "_INVOICE_DATE], [REFERAN_DUE_DATE], [REFERAN_TEAM], [SUPPLY_NO], [SUPPLY_NAME], "& _ 
                "[SUPPLY_INFO], [TOTAL_AMOUNT_EXCLUDE_VAT], [VAT], [TOTAL_AMOUNT_INCLUDE_VAT], [L"& _ 
                "EST_DEPOSIT], [TOTAL_AMOUNT_DUE], [RECEIVE_NOTE]) VALUES (@RECEIVE_DATE, @REFERA"& _ 
                "N_INVOICE_NO, @REFERAN_INVOICE_DATE, @REFERAN_DUE_DATE, @REFERAN_TEAM, @SUPPLY_N"& _ 
                "O, @SUPPLY_NAME, @SUPPLY_INFO, @TOTAL_AMOUNT_EXCLUDE_VAT, @VAT, @TOTAL_AMOUNT_IN"& _ 
                "CLUDE_VAT, @LEST_DEPOSIT, @TOTAL_AMOUNT_DUE, @RECEIVE_NOTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVE_ID,"& _ 
                " RECEIVE_DATE, REFERAN_INVOICE_NO, REFERAN_INVOICE_DATE, REFERAN_DUE_DATE, REFER"& _ 
                "AN_TEAM, SUPPLY_NO, SUPPLY_NAME, SUPPLY_INFO, TOTAL_AMOUNT_EXCLUDE_VAT, VAT, TOT"& _ 
                "AL_AMOUNT_INCLUDE_VAT, LEST_DEPOSIT, TOTAL_AMOUNT_DUE, RECEIVE_NOTE FROM ITEM_RE"& _ 
                "CIEVE_MASTER WHERE (RECEIVE_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_DUE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_TEAM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LEST_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ITEM_RECIEVE_MASTER] SET [RECEIVE_DATE] = @RECEIVE_DATE, [REFERAN_INVOICE"& _ 
                "_NO] = @REFERAN_INVOICE_NO, [REFERAN_INVOICE_DATE] = @REFERAN_INVOICE_DATE, [REF"& _ 
                "ERAN_DUE_DATE] = @REFERAN_DUE_DATE, [REFERAN_TEAM] = @REFERAN_TEAM, [SUPPLY_NO] "& _ 
                "= @SUPPLY_NO, [SUPPLY_NAME] = @SUPPLY_NAME, [SUPPLY_INFO] = @SUPPLY_INFO, [TOTAL"& _ 
                "_AMOUNT_EXCLUDE_VAT] = @TOTAL_AMOUNT_EXCLUDE_VAT, [VAT] = @VAT, [TOTAL_AMOUNT_IN"& _ 
                "CLUDE_VAT] = @TOTAL_AMOUNT_INCLUDE_VAT, [LEST_DEPOSIT] = @LEST_DEPOSIT, [TOTAL_A"& _ 
                "MOUNT_DUE] = @TOTAL_AMOUNT_DUE, [RECEIVE_NOTE] = @RECEIVE_NOTE WHERE (([RECEIVE_"& _ 
                "ID] = @Original_RECEIVE_ID) AND ((@IsNull_RECEIVE_DATE = 1 AND [RECEIVE_DATE] IS"& _ 
                " NULL) OR ([RECEIVE_DATE] = @Original_RECEIVE_DATE)) AND ((@IsNull_REFERAN_INVOI"& _ 
                "CE_NO = 1 AND [REFERAN_INVOICE_NO] IS NULL) OR ([REFERAN_INVOICE_NO] = @Original"& _ 
                "_REFERAN_INVOICE_NO)) AND ((@IsNull_REFERAN_INVOICE_DATE = 1 AND [REFERAN_INVOIC"& _ 
                "E_DATE] IS NULL) OR ([REFERAN_INVOICE_DATE] = @Original_REFERAN_INVOICE_DATE)) A"& _ 
                "ND ((@IsNull_REFERAN_DUE_DATE = 1 AND [REFERAN_DUE_DATE] IS NULL) OR ([REFERAN_D"& _ 
                "UE_DATE] = @Original_REFERAN_DUE_DATE)) AND ((@IsNull_REFERAN_TEAM = 1 AND [REFE"& _ 
                "RAN_TEAM] IS NULL) OR ([REFERAN_TEAM] = @Original_REFERAN_TEAM)) AND ((@IsNull_S"& _ 
                "UPPLY_NO = 1 AND [SUPPLY_NO] IS NULL) OR ([SUPPLY_NO] = @Original_SUPPLY_NO)) AN"& _ 
                "D ((@IsNull_SUPPLY_NAME = 1 AND [SUPPLY_NAME] IS NULL) OR ([SUPPLY_NAME] = @Orig"& _ 
                "inal_SUPPLY_NAME)) AND ((@IsNull_SUPPLY_INFO = 1 AND [SUPPLY_INFO] IS NULL) OR ("& _ 
                "[SUPPLY_INFO] = @Original_SUPPLY_INFO)) AND ((@IsNull_TOTAL_AMOUNT_EXCLUDE_VAT ="& _ 
                " 1 AND [TOTAL_AMOUNT_EXCLUDE_VAT] IS NULL) OR ([TOTAL_AMOUNT_EXCLUDE_VAT] = @Ori"& _ 
                "ginal_TOTAL_AMOUNT_EXCLUDE_VAT)) AND ((@IsNull_VAT = 1 AND [VAT] IS NULL) OR ([V"& _ 
                "AT] = @Original_VAT)) AND ((@IsNull_TOTAL_AMOUNT_INCLUDE_VAT = 1 AND [TOTAL_AMOU"& _ 
                "NT_INCLUDE_VAT] IS NULL) OR ([TOTAL_AMOUNT_INCLUDE_VAT] = @Original_TOTAL_AMOUNT"& _ 
                "_INCLUDE_VAT)) AND ((@IsNull_LEST_DEPOSIT = 1 AND [LEST_DEPOSIT] IS NULL) OR ([L"& _ 
                "EST_DEPOSIT] = @Original_LEST_DEPOSIT)) AND ((@IsNull_TOTAL_AMOUNT_DUE = 1 AND ["& _ 
                "TOTAL_AMOUNT_DUE] IS NULL) OR ([TOTAL_AMOUNT_DUE] = @Original_TOTAL_AMOUNT_DUE))"& _ 
                " AND ((@IsNull_RECEIVE_NOTE = 1 AND [RECEIVE_NOTE] IS NULL) OR ([RECEIVE_NOTE] ="& _ 
                " @Original_RECEIVE_NOTE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RECEIVE_ID, RECEIVE_DATE, REFERAN_INVOICE_NO"& _ 
                ", REFERAN_INVOICE_DATE, REFERAN_DUE_DATE, REFERAN_TEAM, SUPPLY_NO, SUPPLY_NAME, "& _ 
                "SUPPLY_INFO, TOTAL_AMOUNT_EXCLUDE_VAT, VAT, TOTAL_AMOUNT_INCLUDE_VAT, LEST_DEPOS"& _ 
                "IT, TOTAL_AMOUNT_DUE, RECEIVE_NOTE FROM ITEM_RECIEVE_MASTER WHERE (RECEIVE_ID = "& _ 
                "@RECEIVE_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_DUE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_TEAM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LEST_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_DUE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_DUE_DATE", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERAN_TEAM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERAN_TEAM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLY_INFO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLY_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LEST_DEPOSIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LEST_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RECEIVE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.HospitalMS.My.MySettings.Default.AppConnection
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RECEIVE_ID, RECEIVE_DATE, REFERAN_INVOICE_NO, REFERAN_INVOICE_DATE,"& _ 
                " REFERAN_DUE_DATE, REFERAN_TEAM, SUPPLY_NO, SUPPLY_NAME, SUPPLY_INFO, TOTAL_AMOU"& _ 
                "NT_EXCLUDE_VAT, VAT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TOTAL_AMOUNT_INCLUDE_VAT, LEST_D"& _ 
                "EPOSIT, TOTAL_AMOUNT_DUE, RECEIVE_NOTE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ITEM_RECIEVE_MASTER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [ITEM_RECIEVE_MASTER] ([RECEIVE_DATE], [REFERAN_INVOICE_NO], [REFERAN"& _ 
                "_INVOICE_DATE], [REFERAN_DUE_DATE], [REFERAN_TEAM], [SUPPLY_NO], [SUPPLY_NAME], "& _ 
                "[SUPPLY_INFO], [TOTAL_AMOUNT_EXCLUDE_VAT], [VAT], [TOTAL_AMOUNT_INCLUDE_VAT], [L"& _ 
                "EST_DEPOSIT], [TOTAL_AMOUNT_DUE], [RECEIVE_NOTE]) VALUES (@RECEIVE_DATE, @REFERA"& _ 
                "N_INVOICE_NO, @REFERAN_INVOICE_DATE, @REFERAN_DUE_DATE, @REFERAN_TEAM, @SUPPLY_N"& _ 
                "O, @SUPPLY_NAME, @SUPPLY_INFO, @TOTAL_AMOUNT_EXCLUDE_VAT, @VAT, @TOTAL_AMOUNT_IN"& _ 
                "CLUDE_VAT, @LEST_DEPOSIT, @TOTAL_AMOUNT_DUE, @RECEIVE_NOTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_DATE", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_NO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_INVOICE_DATE", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_DUE_DATE", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_DUE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERAN_TEAM", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERAN_TEAM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLY_INFO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLY_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_EXCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VAT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_INCLUDE_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LEST_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "LEST_DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_DUE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_DUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_NOTE", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInventoryClinic.ITEM_RECIEVE_MASTERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInventoryClinic.ITEM_RECIEVE_MASTERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInventoryClinic.ITEM_RECIEVE_MASTERDataTable = New DSInventoryClinic.ITEM_RECIEVE_MASTERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInventoryClinic.ITEM_RECIEVE_MASTERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInventoryClinic) As Integer
            Return Me.Adapter.Update(dataSet, "ITEM_RECIEVE_MASTER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RECEIVE_ID As Decimal, ByVal Original_RECEIVE_DATE As Global.System.Nullable(Of Date), ByVal Original_REFERAN_INVOICE_NO As String, ByVal Original_REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date), ByVal Original_REFERAN_DUE_DATE As Global.System.Nullable(Of Date), ByVal Original_REFERAN_TEAM As String, ByVal Original_SUPPLY_NO As String, ByVal Original_SUPPLY_NAME As String, ByVal Original_SUPPLY_INFO As String, ByVal Original_TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal Original_VAT As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal Original_LEST_DEPOSIT As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal), ByVal Original_RECEIVE_NOTE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RECEIVE_ID,Decimal)
            If (Original_RECEIVE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RECEIVE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_INVOICE_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_REFERAN_INVOICE_NO,String)
            End If
            If (Original_REFERAN_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_REFERAN_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_DUE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_REFERAN_DUE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_TEAM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_REFERAN_TEAM,String)
            End If
            If (Original_SUPPLY_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SUPPLY_NO,String)
            End If
            If (Original_SUPPLY_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SUPPLY_NAME,String)
            End If
            If (Original_SUPPLY_INFO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SUPPLY_INFO,String)
            End If
            If (Original_TOTAL_AMOUNT_EXCLUDE_VAT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_TOTAL_AMOUNT_EXCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_VAT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_VAT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_INCLUDE_VAT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TOTAL_AMOUNT_INCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_LEST_DEPOSIT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_LEST_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_DUE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_TOTAL_AMOUNT_DUE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVE_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_RECEIVE_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RECEIVE_DATE As Global.System.Nullable(Of Date), ByVal REFERAN_INVOICE_NO As String, ByVal REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date), ByVal REFERAN_DUE_DATE As Global.System.Nullable(Of Date), ByVal REFERAN_TEAM As String, ByVal SUPPLY_NO As String, ByVal SUPPLY_NAME As String, ByVal SUPPLY_INFO As String, ByVal TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal VAT As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal LEST_DEPOSIT As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal), ByVal RECEIVE_NOTE As String) As Integer
            If (RECEIVE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RECEIVE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_INVOICE_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(REFERAN_INVOICE_NO,String)
            End If
            If (REFERAN_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(REFERAN_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_DUE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(REFERAN_DUE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_TEAM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(REFERAN_TEAM,String)
            End If
            If (SUPPLY_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SUPPLY_NO,String)
            End If
            If (SUPPLY_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SUPPLY_NAME,String)
            End If
            If (SUPPLY_INFO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SUPPLY_INFO,String)
            End If
            If (TOTAL_AMOUNT_EXCLUDE_VAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TOTAL_AMOUNT_EXCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (VAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(VAT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_INCLUDE_VAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TOTAL_AMOUNT_INCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LEST_DEPOSIT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(LEST_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_DUE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TOTAL_AMOUNT_DUE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RECEIVE_NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RECEIVE_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_INVOICE_NO As String,  _
                    ByVal REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_DUE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_TEAM As String,  _
                    ByVal SUPPLY_NO As String,  _
                    ByVal SUPPLY_NAME As String,  _
                    ByVal SUPPLY_INFO As String,  _
                    ByVal TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal LEST_DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVE_NOTE As String,  _
                    ByVal Original_RECEIVE_ID As Decimal,  _
                    ByVal Original_RECEIVE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_INVOICE_NO As String,  _
                    ByVal Original_REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_DUE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_TEAM As String,  _
                    ByVal Original_SUPPLY_NO As String,  _
                    ByVal Original_SUPPLY_NAME As String,  _
                    ByVal Original_SUPPLY_INFO As String,  _
                    ByVal Original_TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LEST_DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVE_NOTE As String,  _
                    ByVal RECEIVE_ID As Decimal) As Integer
            If (RECEIVE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RECEIVE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_INVOICE_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(REFERAN_INVOICE_NO,String)
            End If
            If (REFERAN_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REFERAN_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_DUE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(REFERAN_DUE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (REFERAN_TEAM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(REFERAN_TEAM,String)
            End If
            If (SUPPLY_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SUPPLY_NO,String)
            End If
            If (SUPPLY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SUPPLY_NAME,String)
            End If
            If (SUPPLY_INFO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SUPPLY_INFO,String)
            End If
            If (TOTAL_AMOUNT_EXCLUDE_VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TOTAL_AMOUNT_EXCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_INCLUDE_VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TOTAL_AMOUNT_INCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LEST_DEPOSIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(LEST_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_DUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TOTAL_AMOUNT_DUE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RECEIVE_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RECEIVE_NOTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RECEIVE_ID,Decimal)
            If (Original_RECEIVE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_RECEIVE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_INVOICE_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_REFERAN_INVOICE_NO,String)
            End If
            If (Original_REFERAN_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_REFERAN_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_DUE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_REFERAN_DUE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERAN_TEAM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_REFERAN_TEAM,String)
            End If
            If (Original_SUPPLY_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SUPPLY_NO,String)
            End If
            If (Original_SUPPLY_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SUPPLY_NAME,String)
            End If
            If (Original_SUPPLY_INFO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SUPPLY_INFO,String)
            End If
            If (Original_TOTAL_AMOUNT_EXCLUDE_VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_TOTAL_AMOUNT_EXCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_INCLUDE_VAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_TOTAL_AMOUNT_INCLUDE_VAT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_LEST_DEPOSIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_LEST_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_DUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_TOTAL_AMOUNT_DUE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVE_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_RECEIVE_NOTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(RECEIVE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECEIVE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_INVOICE_NO As String,  _
                    ByVal REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_DUE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal REFERAN_TEAM As String,  _
                    ByVal SUPPLY_NO As String,  _
                    ByVal SUPPLY_NAME As String,  _
                    ByVal SUPPLY_INFO As String,  _
                    ByVal TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal LEST_DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVE_NOTE As String,  _
                    ByVal Original_RECEIVE_ID As Decimal,  _
                    ByVal Original_RECEIVE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_INVOICE_NO As String,  _
                    ByVal Original_REFERAN_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_DUE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_REFERAN_TEAM As String,  _
                    ByVal Original_SUPPLY_NO As String,  _
                    ByVal Original_SUPPLY_NAME As String,  _
                    ByVal Original_SUPPLY_INFO As String,  _
                    ByVal Original_TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_LEST_DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVE_NOTE As String) As Integer
            Return Me.Update(RECEIVE_DATE, REFERAN_INVOICE_NO, REFERAN_INVOICE_DATE, REFERAN_DUE_DATE, REFERAN_TEAM, SUPPLY_NO, SUPPLY_NAME, SUPPLY_INFO, TOTAL_AMOUNT_EXCLUDE_VAT, VAT, TOTAL_AMOUNT_INCLUDE_VAT, LEST_DEPOSIT, TOTAL_AMOUNT_DUE, RECEIVE_NOTE, Original_RECEIVE_ID, Original_RECEIVE_DATE, Original_REFERAN_INVOICE_NO, Original_REFERAN_INVOICE_DATE, Original_REFERAN_DUE_DATE, Original_REFERAN_TEAM, Original_SUPPLY_NO, Original_SUPPLY_NAME, Original_SUPPLY_INFO, Original_TOTAL_AMOUNT_EXCLUDE_VAT, Original_VAT, Original_TOTAL_AMOUNT_INCLUDE_VAT, Original_LEST_DEPOSIT, Original_TOTAL_AMOUNT_DUE, Original_RECEIVE_NOTE, Original_RECEIVE_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertItemReceiveMaster(ByVal RECEIVE_DATE As String, ByVal REFERAN_INVOICE_NO As String, ByVal REFERAN_INVOICE_DATE As String, ByVal REFERAN_DUE_DATE As String, ByVal REFERAN_TEAM As String, ByVal SUPPLY_NO As String, ByVal SUPPLY_NAME As String, ByVal SUPPLY_INFO As String, ByVal TOTAL_AMOUNT_EXCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal VAT As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_INCLUDE_VAT As Global.System.Nullable(Of Decimal), ByVal LEST_DEPOSIT As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_DUE As Global.System.Nullable(Of Decimal), ByVal RECEIVE_NOTE As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (RECEIVE_DATE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(RECEIVE_DATE,String)
            End If
            If (REFERAN_INVOICE_NO Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(REFERAN_INVOICE_NO,String)
            End If
            If (REFERAN_INVOICE_DATE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(REFERAN_INVOICE_DATE,String)
            End If
            If (REFERAN_DUE_DATE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(REFERAN_DUE_DATE,String)
            End If
            If (REFERAN_TEAM Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(REFERAN_TEAM,String)
            End If
            If (SUPPLY_NO Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(SUPPLY_NO,String)
            End If
            If (SUPPLY_NAME Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(SUPPLY_NAME,String)
            End If
            If (SUPPLY_INFO Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(SUPPLY_INFO,String)
            End If
            If (TOTAL_AMOUNT_EXCLUDE_VAT.HasValue = true) Then
                command.Parameters(8).Value = CType(TOTAL_AMOUNT_EXCLUDE_VAT.Value,Decimal)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (VAT.HasValue = true) Then
                command.Parameters(9).Value = CType(VAT.Value,Decimal)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_INCLUDE_VAT.HasValue = true) Then
                command.Parameters(10).Value = CType(TOTAL_AMOUNT_INCLUDE_VAT.Value,Decimal)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LEST_DEPOSIT.HasValue = true) Then
                command.Parameters(11).Value = CType(LEST_DEPOSIT.Value,Decimal)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_DUE.HasValue = true) Then
                command.Parameters(12).Value = CType(TOTAL_AMOUNT_DUE.Value,Decimal)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RECEIVE_NOTE Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(RECEIVE_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblLabourFactoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblLabourFactory"
            tableMapping.ColumnMappings.Add("LabourFacID", "LabourFacID")
            tableMapping.ColumnMappings.Add("LabourFacName", "LabourFacName")
            tableMapping.ColumnMappings.Add("LabourPhone", "LabourPhone")
            tableMapping.ColumnMappings.Add("LabourFacAddress", "LabourFacAddress")
            tableMapping.ColumnMappings.Add("LabourFacEmail", "LabourFacEmail")
            tableMapping.ColumnMappings.Add("LabourFacFax", "LabourFacFax")
            tableMapping.ColumnMappings.Add("LabourFacRegisterDate", "LabourFacRegisterDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [tblLabourFactory] WHERE (([LabourFacID] = @Original_LabourFacID) AND"& _ 
                " ((@IsNull_LabourFacName = 1 AND [LabourFacName] IS NULL) OR ([LabourFacName] = "& _ 
                "@Original_LabourFacName)) AND ((@IsNull_LabourPhone = 1 AND [LabourPhone] IS NUL"& _ 
                "L) OR ([LabourPhone] = @Original_LabourPhone)) AND ((@IsNull_LabourFacAddress = "& _ 
                "1 AND [LabourFacAddress] IS NULL) OR ([LabourFacAddress] = @Original_LabourFacAd"& _ 
                "dress)) AND ((@IsNull_LabourFacEmail = 1 AND [LabourFacEmail] IS NULL) OR ([Labo"& _ 
                "urFacEmail] = @Original_LabourFacEmail)) AND ((@IsNull_LabourFacFax = 1 AND [Lab"& _ 
                "ourFacFax] IS NULL) OR ([LabourFacFax] = @Original_LabourFacFax)) AND ((@IsNull_"& _ 
                "LabourFacRegisterDate = 1 AND [LabourFacRegisterDate] IS NULL) OR ([LabourFacReg"& _ 
                "isterDate] = @Original_LabourFacRegisterDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourPhone", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacAddress", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacEmail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacFax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacFax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tblLabourFactory] ([LabourFacName], [LabourPhone], [LabourFacAddress"& _ 
                "], [LabourFacEmail], [LabourFacFax], [LabourFacRegisterDate]) VALUES (@LabourFac"& _ 
                "Name, @LabourPhone, @LabourFacAddress, @LabourFacEmail, @LabourFacFax, @LabourFa"& _ 
                "cRegisterDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LabourFacID, LabourFacName, LabourPhone, LabourFacAddres"& _ 
                "s, LabourFacEmail, LabourFacFax, LabourFacRegisterDate FROM tblLabourFactory WHE"& _ 
                "RE (LabourFacID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourPhone", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacFax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [tblLabourFactory] SET [LabourFacName] = @LabourFacName, [LabourPhone] = @"& _ 
                "LabourPhone, [LabourFacAddress] = @LabourFacAddress, [LabourFacEmail] = @LabourF"& _ 
                "acEmail, [LabourFacFax] = @LabourFacFax, [LabourFacRegisterDate] = @LabourFacReg"& _ 
                "isterDate WHERE (([LabourFacID] = @Original_LabourFacID) AND ((@IsNull_LabourFac"& _ 
                "Name = 1 AND [LabourFacName] IS NULL) OR ([LabourFacName] = @Original_LabourFacN"& _ 
                "ame)) AND ((@IsNull_LabourPhone = 1 AND [LabourPhone] IS NULL) OR ([LabourPhone]"& _ 
                " = @Original_LabourPhone)) AND ((@IsNull_LabourFacAddress = 1 AND [LabourFacAddr"& _ 
                "ess] IS NULL) OR ([LabourFacAddress] = @Original_LabourFacAddress)) AND ((@IsNul"& _ 
                "l_LabourFacEmail = 1 AND [LabourFacEmail] IS NULL) OR ([LabourFacEmail] = @Origi"& _ 
                "nal_LabourFacEmail)) AND ((@IsNull_LabourFacFax = 1 AND [LabourFacFax] IS NULL) "& _ 
                "OR ([LabourFacFax] = @Original_LabourFacFax)) AND ((@IsNull_LabourFacRegisterDat"& _ 
                "e = 1 AND [LabourFacRegisterDate] IS NULL) OR ([LabourFacRegisterDate] = @Origin"& _ 
                "al_LabourFacRegisterDate)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LabourFacID, LabourFacName, LabourPhone, La"& _ 
                "bourFacAddress, LabourFacEmail, LabourFacFax, LabourFacRegisterDate FROM tblLabo"& _ 
                "urFactory WHERE (LabourFacID = @LabourFacID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourPhone", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacFax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourPhone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourPhone", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourPhone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacAddress", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacAddress", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacEmail", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacEmail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacFax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacFax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacFax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.HospitalMS.My.MySettings.Default.AppConnection
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        LabourFacID, LabourFacName, LabourPhone, LabourFacAddress, LabourFa"& _ 
                "cEmail, LabourFacFax, LabourFacRegisterDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblLabourFactory"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        LabourFacID, LabourFacName, LabourPhone, LabourFacAddress, LabourFa"& _ 
                "cEmail, LabourFacFax, LabourFacRegisterDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblLabourFactory"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LabourFacID=@LabourFacID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInventoryClinic.tblLabourFactoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInventoryClinic.tblLabourFactoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInventoryClinic.tblLabourFactoryDataTable = New DSInventoryClinic.tblLabourFactoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSInventoryClinic.tblLabourFactoryDataTable, ByVal LabourFacID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LabourFacID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectSupplyierbyID(ByVal LabourFacID As Integer) As DSInventoryClinic.tblLabourFactoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LabourFacID,Integer)
            Dim dataTable As DSInventoryClinic.tblLabourFactoryDataTable = New DSInventoryClinic.tblLabourFactoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInventoryClinic.tblLabourFactoryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInventoryClinic) As Integer
            Return Me.Adapter.Update(dataSet, "tblLabourFactory")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LabourFacID As Integer, ByVal Original_LabourFacName As String, ByVal Original_LabourPhone As String, ByVal Original_LabourFacAddress As String, ByVal Original_LabourFacEmail As String, ByVal Original_LabourFacFax As String, ByVal Original_LabourFacRegisterDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LabourFacID,Integer)
            If (Original_LabourFacName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LabourFacName,String)
            End If
            If (Original_LabourPhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LabourPhone,String)
            End If
            If (Original_LabourFacAddress Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LabourFacAddress,String)
            End If
            If (Original_LabourFacEmail Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LabourFacEmail,String)
            End If
            If (Original_LabourFacFax Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_LabourFacFax,String)
            End If
            If (Original_LabourFacRegisterDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LabourFacRegisterDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LabourFacName As String, ByVal LabourPhone As String, ByVal LabourFacAddress As String, ByVal LabourFacEmail As String, ByVal LabourFacFax As String, ByVal LabourFacRegisterDate As Global.System.Nullable(Of Date)) As Integer
            If (LabourFacName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LabourFacName,String)
            End If
            If (LabourPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LabourPhone,String)
            End If
            If (LabourFacAddress Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LabourFacAddress,String)
            End If
            If (LabourFacEmail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LabourFacEmail,String)
            End If
            If (LabourFacFax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LabourFacFax,String)
            End If
            If (LabourFacRegisterDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LabourFacRegisterDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LabourFacName As String, ByVal LabourPhone As String, ByVal LabourFacAddress As String, ByVal LabourFacEmail As String, ByVal LabourFacFax As String, ByVal LabourFacRegisterDate As Global.System.Nullable(Of Date), ByVal Original_LabourFacID As Integer, ByVal Original_LabourFacName As String, ByVal Original_LabourPhone As String, ByVal Original_LabourFacAddress As String, ByVal Original_LabourFacEmail As String, ByVal Original_LabourFacFax As String, ByVal Original_LabourFacRegisterDate As Global.System.Nullable(Of Date), ByVal LabourFacID As Integer) As Integer
            If (LabourFacName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LabourFacName,String)
            End If
            If (LabourPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LabourPhone,String)
            End If
            If (LabourFacAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LabourFacAddress,String)
            End If
            If (LabourFacEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LabourFacEmail,String)
            End If
            If (LabourFacFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LabourFacFax,String)
            End If
            If (LabourFacRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LabourFacRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LabourFacID,Integer)
            If (Original_LabourFacName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LabourFacName,String)
            End If
            If (Original_LabourPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_LabourPhone,String)
            End If
            If (Original_LabourFacAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_LabourFacAddress,String)
            End If
            If (Original_LabourFacEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_LabourFacEmail,String)
            End If
            If (Original_LabourFacFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_LabourFacFax,String)
            End If
            If (Original_LabourFacRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_LabourFacRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LabourFacID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LabourFacName As String, ByVal LabourPhone As String, ByVal LabourFacAddress As String, ByVal LabourFacEmail As String, ByVal LabourFacFax As String, ByVal LabourFacRegisterDate As Global.System.Nullable(Of Date), ByVal Original_LabourFacID As Integer, ByVal Original_LabourFacName As String, ByVal Original_LabourPhone As String, ByVal Original_LabourFacAddress As String, ByVal Original_LabourFacEmail As String, ByVal Original_LabourFacFax As String, ByVal Original_LabourFacRegisterDate As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(LabourFacName, LabourPhone, LabourFacAddress, LabourFacEmail, LabourFacFax, LabourFacRegisterDate, Original_LabourFacID, Original_LabourFacName, Original_LabourPhone, Original_LabourFacAddress, Original_LabourFacEmail, Original_LabourFacFax, Original_LabourFacRegisterDate, Original_LabourFacID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _rECEIVE_ITEM_TEM_DETAILTableAdapter As RECEIVE_ITEM_TEM_DETAILTableAdapter
        
        Private _tblItemTableAdapter As tblItemTableAdapter
        
        Private _iTEM_RECIEVE_DETIALTableAdapter As ITEM_RECIEVE_DETIALTableAdapter
        
        Private _iTEM_RECIEVE_MASTERTableAdapter As ITEM_RECIEVE_MASTERTableAdapter
        
        Private _tblLabourFactoryTableAdapter As tblLabourFactoryTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RECEIVE_ITEM_TEM_DETAILTableAdapter() As RECEIVE_ITEM_TEM_DETAILTableAdapter
            Get
                Return Me._rECEIVE_ITEM_TEM_DETAILTableAdapter
            End Get
            Set
                Me._rECEIVE_ITEM_TEM_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblItemTableAdapter() As tblItemTableAdapter
            Get
                Return Me._tblItemTableAdapter
            End Get
            Set
                Me._tblItemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ITEM_RECIEVE_DETIALTableAdapter() As ITEM_RECIEVE_DETIALTableAdapter
            Get
                Return Me._iTEM_RECIEVE_DETIALTableAdapter
            End Get
            Set
                Me._iTEM_RECIEVE_DETIALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ITEM_RECIEVE_MASTERTableAdapter() As ITEM_RECIEVE_MASTERTableAdapter
            Get
                Return Me._iTEM_RECIEVE_MASTERTableAdapter
            End Get
            Set
                Me._iTEM_RECIEVE_MASTERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblLabourFactoryTableAdapter() As tblLabourFactoryTableAdapter
            Get
                Return Me._tblLabourFactoryTableAdapter
            End Get
            Set
                Me._tblLabourFactoryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection
                End If
                If ((Not (Me._tblItemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblItemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblItemTableAdapter.Connection
                End If
                If ((Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iTEM_RECIEVE_DETIALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iTEM_RECIEVE_DETIALTableAdapter.Connection
                End If
                If ((Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iTEM_RECIEVE_MASTERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iTEM_RECIEVE_MASTERTableAdapter.Connection
                End If
                If ((Not (Me._tblLabourFactoryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblLabourFactoryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblLabourFactoryTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSInventoryClinic, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_MASTERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblLabourFactory.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblLabourFactoryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_DETIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_DETIALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RECEIVE_ITEM_TEM_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSInventoryClinic, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_MASTERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblLabourFactory.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblLabourFactoryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_DETIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_DETIALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RECEIVE_ITEM_TEM_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSInventoryClinic, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RECEIVE_ITEM_TEM_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_DETIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_DETIALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblLabourFactory.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblLabourFactoryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ITEM_RECIEVE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iTEM_RECIEVE_MASTERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSInventoryClinic) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblItemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblItemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iTEM_RECIEVE_DETIALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iTEM_RECIEVE_MASTERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblLabourFactoryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblLabourFactoryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rECEIVE_ITEM_TEM_DETAILTableAdapter, Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection)
                    Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblItemTableAdapter, Me._tblItemTableAdapter.Connection)
                    Me._tblItemTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblItemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblItemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblItemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblItemTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iTEM_RECIEVE_DETIALTableAdapter, Me._iTEM_RECIEVE_DETIALTableAdapter.Connection)
                    Me._iTEM_RECIEVE_DETIALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_RECIEVE_DETIALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iTEM_RECIEVE_DETIALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iTEM_RECIEVE_DETIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iTEM_RECIEVE_DETIALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iTEM_RECIEVE_MASTERTableAdapter, Me._iTEM_RECIEVE_MASTERTableAdapter.Connection)
                    Me._iTEM_RECIEVE_MASTERTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_RECIEVE_MASTERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iTEM_RECIEVE_MASTERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iTEM_RECIEVE_MASTERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iTEM_RECIEVE_MASTERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblLabourFactoryTableAdapter, Me._tblLabourFactoryTableAdapter.Connection)
                    Me._tblLabourFactoryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblLabourFactoryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblLabourFactoryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblLabourFactoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblLabourFactoryTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._rECEIVE_ITEM_TEM_DETAILTableAdapter) Is Nothing) Then
                    Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Connection = CType(revertConnections(Me._rECEIVE_ITEM_TEM_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rECEIVE_ITEM_TEM_DETAILTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    Me._tblItemTableAdapter.Connection = CType(revertConnections(Me._tblItemTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblItemTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iTEM_RECIEVE_DETIALTableAdapter) Is Nothing) Then
                    Me._iTEM_RECIEVE_DETIALTableAdapter.Connection = CType(revertConnections(Me._iTEM_RECIEVE_DETIALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_RECIEVE_DETIALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iTEM_RECIEVE_MASTERTableAdapter) Is Nothing) Then
                    Me._iTEM_RECIEVE_MASTERTableAdapter.Connection = CType(revertConnections(Me._iTEM_RECIEVE_MASTERTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_RECIEVE_MASTERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblLabourFactoryTableAdapter) Is Nothing) Then
                    Me._tblLabourFactoryTableAdapter.Connection = CType(revertConnections(Me._tblLabourFactoryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblLabourFactoryTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
